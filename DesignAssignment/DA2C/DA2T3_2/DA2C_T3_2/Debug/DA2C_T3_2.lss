
DA2C_T3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>

int main(void)
{

	DDRB = 0b0100;					// set PB2 as output when pressed
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = (0b0001<<0b0101);		// turn off PB5 LED
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	85 b9       	out	0x05, r24	; 5
	DDRC = (0b0000<<0b0001);		// reads data entered
  88:	17 b8       	out	0x07, r1	; 7
	PORTC = (0b0001<<0b0001);		// will cause it to light up and display
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	88 b9       	out	0x08, r24	; 8
	TCNT0 = 0b0000;					//sets register to 0
  8e:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (0b0001<< WGM01);		//ctc mode enable 
  90:	84 b5       	in	r24, 0x24	; 36
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0b0001<< CS02) | (0b0001 << CS00); // makes prescalar to 1024
  96:	85 b5       	in	r24, 0x25	; 37
  98:	85 60       	ori	r24, 0x05	; 5
  9a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (0b0001<< OCIE0A);				//enables campare match
  9c:	ee e6       	ldi	r30, 0x6E	; 110
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
	sei ();
  a6:	78 94       	sei
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x28>

000000aa <__vector_14>:
	}
	
}

ISR(TIMER0_COMPA_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	uint8_t timerOverflowCount=0;
	while ((TIFR0 & 0x01) == 0);
  ba:	a8 9b       	sbis	0x15, 0	; 21
  bc:	fe cf       	rjmp	.-4      	; 0xba <__vector_14+0x10>
	TCNT0=0x00;							// resets the timer to zero
  be:	16 bc       	out	0x26, r1	; 38
	TIFR0=0x01;							// reset the overflow flag
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	85 bb       	out	0x15, r24	; 21
	timerOverflowCount++;				// counts every time the timer overflows
	
	if(PINC & (PINC1<<PINC1))	//to see if the switch is pressed
  c4:	31 9b       	sbis	0x06, 1	; 6
  c6:	03 c0       	rjmp	.+6      	; 0xce <__vector_14+0x24>
	{
		PORTB = (PORTB1<<PORTB2);	// if there is no input keep led off
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <__vector_14+0x38>
		
	}
	
	else
	{
		PORTB &= ~(PORTB1<<PORTB2);	// toggle the led
  ce:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	9d e3       	ldi	r25, 0x3D	; 61
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__vector_14+0x2c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__vector_14+0x36>
  e0:	00 00       	nop
		_delay_ms(1250);	// keep the light on for 1.25 SECONDS
	}
	
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	2f 91       	pop	r18
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
