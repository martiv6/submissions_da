
DA2C_T1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  00001589  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	uint8_t timerOverflowCount=0;
	DDRB = 0b0100;					// set PB2 as output when pressed
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = (0b0001<<0b0101);		// turn off PB5 LED
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	85 b9       	out	0x05, r24	; 5
	DDRC = (0b0000<<0b0001);		// reads data entered
  88:	17 b8       	out	0x07, r1	; 7
	PORTC = (0b0001<<0b0001);		// will cause it to light up and display
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	88 b9       	out	0x08, r24	; 8
	TCNT0 = 0b0000;					//sets register to 0
  8e:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (0b0001<< CS02) | (0b0001 << CS00); // makes prescalar to 1024 
  90:	85 b5       	in	r24, 0x25	; 37
  92:	85 60       	ori	r24, 0x05	; 5
  94:	85 bd       	out	0x25, r24	; 37
	
	while (1)
	{
		while ((TIFR0 & 0x01) == 0);
		TCNT0=0x00;							// resets the timer to zero
		TIFR0=0x01;							// reset the overflow flag
  96:	81 e0       	ldi	r24, 0x01	; 1
		timerOverflowCount++;				// counts every time the timer overflows
		
		if(PINC & (PINC1<<PINC1))	//to see if the switch is pressed
		{
			PORTB = (PORTB1<<PORTB2);	// if there is no input keep led off
  98:	94 e0       	ldi	r25, 0x04	; 4
	TCNT0 = 0b0000;					//sets register to 0
	TCCR0B |= (0b0001<< CS02) | (0b0001 << CS00); // makes prescalar to 1024 
	
	while (1)
	{
		while ((TIFR0 & 0x01) == 0);
  9a:	a8 9b       	sbis	0x15, 0	; 21
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1a>
		TCNT0=0x00;							// resets the timer to zero
  9e:	16 bc       	out	0x26, r1	; 38
		TIFR0=0x01;							// reset the overflow flag
  a0:	85 bb       	out	0x15, r24	; 21
		timerOverflowCount++;				// counts every time the timer overflows
		
		if(PINC & (PINC1<<PINC1))	//to see if the switch is pressed
  a2:	31 9b       	sbis	0x06, 1	; 6
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x2a>
		{
			PORTB = (PORTB1<<PORTB2);	// if there is no input keep led off
  a6:	95 b9       	out	0x05, r25	; 5
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <main+0x1a>
			
		}
		
		else
		{
			PORTB &= ~(PORTB1<<PORTB2);	// toggle the led
  aa:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	38 e0       	ldi	r19, 0x08	; 8
  b0:	4d e3       	ldi	r20, 0x3D	; 61
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	ed cf       	rjmp	.-38     	; 0x9a <main+0x1a>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
