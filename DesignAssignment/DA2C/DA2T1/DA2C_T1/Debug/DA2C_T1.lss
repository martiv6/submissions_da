
DA2C_T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	uint8_t timerOverflowCount=0;
	
	
	DDRB = 0b0100;							// makes pd2 an output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0b0000;						// normal Operation
  84:	14 bc       	out	0x24, r1	; 36
	TCNT0= 0b0000;							// start the timer
  86:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS02) | (1 << CS00);	// set prescaler to 1024 and start the timer
  88:	85 b5       	in	r24, 0x25	; 37
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	85 bd       	out	0x25, r24	; 37
// period cycles (16M * .725 /1024)-1 = 1132812 
// duty cycle (16M *.435 /1024)-1 = 6796

int main(void)
{
	uint8_t timerOverflowCount=0;
  8e:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
											// wait for the overflow event
		while ((TIFR0 & 0x01) == 0);
		TCNT0=0x00;							// resets the timer to zero
		TIFR0=0x01;							// reset the overflow flag
  90:	91 e0       	ldi	r25, 0x01	; 1
		timerOverflowCount++;				// counts every time the timer overflows
		
		if (timerOverflowCount>=22)			// gets the period to be .725 seconds
		{
	
			PORTB = (1 << PORTB2);	//turns on the led we want
  92:	34 e0       	ldi	r19, 0x04	; 4
		_delay_ms(435);			//time the led will be off to get the 60% DC with the period of 0.725 
		PORTB= ~(1 << PORTB2);	//will turn on led 
  94:	2b ef       	ldi	r18, 0xFB	; 251
	

	while (1)
	{
											// wait for the overflow event
		while ((TIFR0 & 0x01) == 0);
  96:	a8 9b       	sbis	0x15, 0	; 21
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x16>
		TCNT0=0x00;							// resets the timer to zero
  9a:	16 bc       	out	0x26, r1	; 38
		TIFR0=0x01;							// reset the overflow flag
  9c:	95 bb       	out	0x15, r25	; 21
		timerOverflowCount++;				// counts every time the timer overflows
  9e:	8f 5f       	subi	r24, 0xFF	; 255
		
		if (timerOverflowCount>=22)			// gets the period to be .725 seconds
  a0:	86 31       	cpi	r24, 0x16	; 22
  a2:	c8 f3       	brcs	.-14     	; 0x96 <main+0x16>
		{
	
			PORTB = (1 << PORTB2);	//turns on the led we want
  a4:	35 b9       	out	0x05, r19	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	4f e7       	ldi	r20, 0x7F	; 127
  a8:	5d e3       	ldi	r21, 0x3D	; 61
  aa:	65 e1       	ldi	r22, 0x15	; 21
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	50 40       	sbci	r21, 0x00	; 0
  b0:	60 40       	sbci	r22, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
		_delay_ms(435);			//time the led will be off to get the 60% DC with the period of 0.725 
		PORTB= ~(1 << PORTB2);	//will turn on led 
  b8:	25 b9       	out	0x05, r18	; 5
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	58 e2       	ldi	r21, 0x28	; 40
  be:	6e e0       	ldi	r22, 0x0E	; 14
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	50 40       	sbci	r21, 0x00	; 0
  c4:	60 40       	sbci	r22, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
  cc:	e4 cf       	rjmp	.-56     	; 0x96 <main+0x16>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
