
DA6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000151e  000015b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000151e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800150  00800150  00001602  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106f  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d8  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000904  00000000  00000000  000030af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000039b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000564  00000000  00000000  00004057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000045bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__mulsf3_pse+0x12>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <main+0x20e>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <Read_RawValue+0x6e>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <I2C_Repeated_Start+0x22>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ee e1       	ldi	r30, 0x1E	; 30
     176:	f5 e1       	ldi	r31, 0x15	; 21
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a0 35       	cpi	r26, 0x50	; 80
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a0 e5       	ldi	r26, 0x50	; 80
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	ac 36       	cpi	r26, 0x6C	; 108
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
     198:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1a4:	88 e4       	ldi	r24, 0x48	; 72
     1a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1aa:	08 95       	ret

000001ac <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     1ac:	94 ea       	ldi	r25, 0xA4	; 164
     1ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     1b2:	ec eb       	ldi	r30, 0xBC	; 188
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	90 81       	ld	r25, Z
     1b8:	99 23       	and	r25, r25
     1ba:	ec f7       	brge	.-6      	; 0x1b6 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 31       	cpi	r25, 0x10	; 16
     1c4:	99 f4       	brne	.+38     	; 0x1ec <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1ca:	84 e8       	ldi	r24, 0x84	; 132
     1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1d0:	ec eb       	ldi	r30, 0xBC	; 188
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	88 23       	and	r24, r24
     1d8:	ec f7       	brge	.-6      	; 0x1d4 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1de:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     1e0:	80 34       	cpi	r24, 0x40	; 64
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     1e4:	80 32       	cpi	r24, 0x20	; 32
     1e6:	31 f0       	breq	.+12     	; 0x1f4 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     1f4:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1f6:	08 95       	ret

000001f8 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     1f8:	84 e9       	ldi	r24, 0x94	; 148
     1fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     1fe:	ec eb       	ldi	r30, 0xBC	; 188
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	84 fd       	sbrc	r24, 4
     206:	fd cf       	rjmp	.-6      	; 0x202 <I2C_Stop+0xa>
}
     208:	08 95       	ret

0000020a <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     21e:	cc eb       	ldi	r28, 0xBC	; 188
     220:	d0 e0       	ldi	r29, 0x00	; 0
     222:	0f 2e       	mov	r0, r31
     224:	f4 ea       	ldi	r31, 0xA4	; 164
     226:	df 2e       	mov	r13, r31
     228:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     22a:	09 eb       	ldi	r16, 0xB9	; 185
     22c:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     22e:	0f 2e       	mov	r0, r31
     230:	fb eb       	ldi	r31, 0xBB	; 187
     232:	ef 2e       	mov	r14, r31
     234:	f1 2c       	mov	r15, r1
     236:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     238:	0f 2e       	mov	r0, r31
     23a:	f4 e8       	ldi	r31, 0x84	; 132
     23c:	cf 2e       	mov	r12, r31
     23e:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     240:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     242:	88 81       	ld	r24, Y
     244:	88 23       	and	r24, r24
     246:	ec f7       	brge	.-6      	; 0x242 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     248:	f8 01       	movw	r30, r16
     24a:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     24c:	88 7f       	andi	r24, 0xF8	; 248
     24e:	88 30       	cpi	r24, 0x08	; 8
     250:	b9 f7       	brne	.-18     	; 0x240 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     252:	f7 01       	movw	r30, r14
     254:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     256:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     258:	88 81       	ld	r24, Y
     25a:	88 23       	and	r24, r24
     25c:	ec f7       	brge	.-6      	; 0x258 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     25e:	f8 01       	movw	r30, r16
     260:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     262:	88 7f       	andi	r24, 0xF8	; 248
     264:	88 31       	cpi	r24, 0x18	; 24
     266:	19 f0       	breq	.+6      	; 0x26e <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
     268:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>
			continue;										/* continue with start loop again */
     26c:	e9 cf       	rjmp	.-46     	; 0x240 <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	bf 90       	pop	r11
     280:	08 95       	ret

00000282 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     282:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     286:	84 e8       	ldi	r24, 0x84	; 132
     288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     28c:	ec eb       	ldi	r30, 0xBC	; 188
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	88 23       	and	r24, r24
     294:	ec f7       	brge	.-6      	; 0x290 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     296:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     29a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     29c:	88 32       	cpi	r24, 0x28	; 40
     29e:	21 f0       	breq	.+8      	; 0x2a8 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     2a0:	80 33       	cpi	r24, 0x30	; 48
     2a2:	21 f0       	breq	.+8      	; 0x2ac <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     2ac:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     2ae:	08 95       	ret

000002b0 <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     2b0:	84 ec       	ldi	r24, 0xC4	; 196
     2b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     2b6:	ec eb       	ldi	r30, 0xBC	; 188
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	ec f7       	brge	.-6      	; 0x2ba <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
     2c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}	
     2c4:	08 95       	ret

000002c6 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     2c6:	84 e8       	ldi	r24, 0x84	; 132
     2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     2cc:	ec eb       	ldi	r30, 0xBC	; 188
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	88 23       	and	r24, r24
     2d4:	ec f7       	brge	.-6      	; 0x2d0 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
     2d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}	
     2da:	08 95       	ret

000002dc <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	2f ef       	ldi	r18, 0xFF	; 255
     2de:	82 e5       	ldi	r24, 0x52	; 82
     2e0:	97 e0       	ldi	r25, 0x07	; 7
     2e2:	21 50       	subi	r18, 0x01	; 1
     2e4:	80 40       	sbci	r24, 0x00	; 0
     2e6:	90 40       	sbci	r25, 0x00	; 0
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <MPU6050_Init+0x6>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <MPU6050_Init+0x10>
     2ec:	00 00       	nop
float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     2ee:	80 ed       	ldi	r24, 0xD0	; 208
     2f0:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     2f4:	89 e1       	ldi	r24, 0x19	; 25
     2f6:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     2fa:	87 e0       	ldi	r24, 0x07	; 7
     2fc:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Stop();
     300:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     304:	80 ed       	ldi	r24, 0xD0	; 208
     306:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     30a:	8b e6       	ldi	r24, 0x6B	; 107
     30c:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Stop();
     316:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     31a:	80 ed       	ldi	r24, 0xD0	; 208
     31c:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     320:	8a e1       	ldi	r24, 0x1A	; 26
     322:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Stop();
     32c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     330:	80 ed       	ldi	r24, 0xD0	; 208
     332:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     336:	8b e1       	ldi	r24, 0x1B	; 27
     338:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     33c:	88 e1       	ldi	r24, 0x18	; 24
     33e:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Stop();
     342:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     346:	80 ed       	ldi	r24, 0xD0	; 208
     348:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     34c:	88 e3       	ldi	r24, 0x38	; 56
     34e:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Write(0x01);
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Stop();
     358:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>
     35c:	08 95       	ret

0000035e <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     35e:	80 ed       	ldi	r24, 0xD0	; 208
     360:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     364:	8b e3       	ldi	r24, 0x3B	; 59
     366:	0e 94 41 01 	call	0x282	; 0x282 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     36a:	81 ed       	ldi	r24, 0xD1	; 209
     36c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <I2C_Repeated_Start>
     370:	08 95       	ret

00000372 <Read_RawValue>:
}

void Read_RawValue()
{
     372:	cf 93       	push	r28
	MPU_Start_Loc();									/* Read Gyro values */
     374:	0e 94 af 01 	call	0x35e	; 0x35e <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     378:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     37c:	c8 2f       	mov	r28, r24
     37e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     382:	6c 2f       	mov	r22, r28
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	76 2f       	mov	r23, r22
     388:	66 27       	eor	r22, r22
     38a:	68 2b       	or	r22, r24
     38c:	07 2e       	mov	r0, r23
     38e:	00 0c       	add	r0, r0
     390:	88 0b       	sbc	r24, r24
     392:	99 0b       	sbc	r25, r25
     394:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     398:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <Acc_x>
     39c:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <Acc_x+0x1>
     3a0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <Acc_x+0x2>
     3a4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3a8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     3ac:	c8 2f       	mov	r28, r24
     3ae:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     3b2:	6c 2f       	mov	r22, r28
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	76 2f       	mov	r23, r22
     3b8:	66 27       	eor	r22, r22
     3ba:	68 2b       	or	r22, r24
     3bc:	07 2e       	mov	r0, r23
     3be:	00 0c       	add	r0, r0
     3c0:	88 0b       	sbc	r24, r24
     3c2:	99 0b       	sbc	r25, r25
     3c4:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     3c8:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <Acc_y>
     3cc:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <Acc_y+0x1>
     3d0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Acc_y+0x2>
     3d4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     3dc:	c8 2f       	mov	r28, r24
     3de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     3e2:	6c 2f       	mov	r22, r28
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	76 2f       	mov	r23, r22
     3e8:	66 27       	eor	r22, r22
     3ea:	68 2b       	or	r22, r24
     3ec:	07 2e       	mov	r0, r23
     3ee:	00 0c       	add	r0, r0
     3f0:	88 0b       	sbc	r24, r24
     3f2:	99 0b       	sbc	r25, r25
     3f4:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     3f8:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <__data_end>
     3fc:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <__data_end+0x1>
     400:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end+0x2>
     404:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     408:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     40c:	c8 2f       	mov	r28, r24
     40e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     412:	6c 2f       	mov	r22, r28
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	76 2f       	mov	r23, r22
     418:	66 27       	eor	r22, r22
     41a:	68 2b       	or	r22, r24
     41c:	07 2e       	mov	r0, r23
     41e:	00 0c       	add	r0, r0
     420:	88 0b       	sbc	r24, r24
     422:	99 0b       	sbc	r25, r25
     424:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     428:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <Gyro_x>
     42c:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <Gyro_x+0x1>
     430:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Gyro_x+0x2>
     434:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     438:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     43c:	c8 2f       	mov	r28, r24
     43e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     442:	6c 2f       	mov	r22, r28
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	76 2f       	mov	r23, r22
     448:	66 27       	eor	r22, r22
     44a:	68 2b       	or	r22, r24
     44c:	07 2e       	mov	r0, r23
     44e:	00 0c       	add	r0, r0
     450:	88 0b       	sbc	r24, r24
     452:	99 0b       	sbc	r25, r25
     454:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     458:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <Gyro_y>
     45c:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <Gyro_y+0x1>
     460:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Gyro_y+0x2>
     464:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     468:	0e 94 58 01 	call	0x2b0	; 0x2b0 <I2C_Read_Ack>
     46c:	c8 2f       	mov	r28, r24
     46e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <I2C_Read_Nack>
     472:	6c 2f       	mov	r22, r28
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	76 2f       	mov	r23, r22
     478:	66 27       	eor	r22, r22
     47a:	68 2b       	or	r22, r24
     47c:	07 2e       	mov	r0, r23
     47e:	00 0c       	add	r0, r0
     480:	88 0b       	sbc	r24, r24
     482:	99 0b       	sbc	r25, r25
     484:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
     488:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <Gyro_z>
     48c:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <Gyro_z+0x1>
     490:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <Gyro_z+0x2>
     494:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <Gyro_z+0x3>
	I2C_Stop();
     498:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Stop>
}
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <main>:

int main()
{
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	e2 97       	sbiw	r28, 0x32	; 50
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
	char buffer[20], float_[10];
	float Xa,Ya,Za,t;
	float Xg=0,Yg=0,Zg=0;
	I2C_Init();											/* Initialize I2C */
     4b4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <I2C_Init>
	MPU6050_Init();										/* Initialize MPU6050 */
     4b8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <MPU6050_Init>
	USART_Init(9600);									/* Initialize USART with 9600 baud rate */
     4bc:	60 e8       	ldi	r22, 0x80	; 128
     4be:	75 e2       	ldi	r23, 0x25	; 37
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <USART_Init>
		Xg = Gyro_x/16.4;
		Yg = Gyro_y/16.4;
		Zg = Gyro_z/16.4;


		dtostrf( Xa, 3, 2, float_ );					/* Take values in buffer to send all parameters over USART */
     4c8:	7e 01       	movw	r14, r28
     4ca:	25 e1       	ldi	r18, 0x15	; 21
     4cc:	e2 0e       	add	r14, r18
     4ce:	f1 1c       	adc	r15, r1
		sprintf(buffer," Ax = %s g\t",float_);
     4d0:	ce 01       	movw	r24, r28
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	6c 01       	movw	r12, r24
		dtostrf( Ya, 3, 2, float_ );
		sprintf(buffer," Ay = %s g\t",float_);
		USART_SendString(buffer);
		
		dtostrf( Za, 3, 2, float_ );
		sprintf(buffer," Az = %s g\t",float_);
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f8 e1       	ldi	r31, 0x18	; 24
     4da:	4f 2e       	mov	r4, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	5f 2e       	mov	r5, r31
     4e0:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);

		dtostrf( Xg, 3, 2, float_ );
		sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f8 ef       	ldi	r31, 0xF8	; 248
     4e6:	3f 2e       	mov	r3, r31
     4e8:	f0 2d       	mov	r31, r0
     4ea:	0f 2e       	mov	r0, r31
     4ec:	f4 e2       	ldi	r31, 0x24	; 36
     4ee:	6f 2e       	mov	r6, r31
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	7f 2e       	mov	r7, r31
     4f4:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);

		dtostrf( Yg, 3, 2, float_ );
		sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f2 e3       	ldi	r31, 0x32	; 50
     4fa:	8f 2e       	mov	r8, r31
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	9f 2e       	mov	r9, r31
     500:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);
		
		dtostrf( Zg, 3, 2, float_ );
		sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);
     502:	0f 2e       	mov	r0, r31
     504:	f0 e4       	ldi	r31, 0x40	; 64
     506:	af 2e       	mov	r10, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	bf 2e       	mov	r11, r31
     50c:	f0 2d       	mov	r31, r0
	MPU6050_Init();										/* Initialize MPU6050 */
	USART_Init(9600);									/* Initialize USART with 9600 baud rate */
	
	while(1)
	{
		Read_RawValue();
     50e:	0e 94 b9 01 	call	0x372	; 0x372 <Read_RawValue>

		Xa = Acc_x/16384.0;								/* Divide raw value by sensitivity scale factor to get real values */
		Ya = Acc_y/16384.0;
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e8       	ldi	r20, 0x80	; 128
     518:	58 e3       	ldi	r21, 0x38	; 56
     51a:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <Acc_y>
     51e:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <Acc_y+0x1>
     522:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Acc_y+0x2>
     526:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Acc_y+0x3>
     52a:	0e 94 c2 04 	call	0x984	; 0x984 <__mulsf3>
     52e:	6f 8f       	std	Y+31, r22	; 0x1f
     530:	78 a3       	std	Y+32, r23	; 0x20
     532:	89 a3       	std	Y+33, r24	; 0x21
     534:	9a a3       	std	Y+34, r25	; 0x22
		Za = Acc_z/16384.0;
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e8       	ldi	r20, 0x80	; 128
     53c:	58 e3       	ldi	r21, 0x38	; 56
     53e:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <__data_end>
     542:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <__data_end+0x1>
     546:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end+0x2>
     54a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x3>
     54e:	0e 94 c2 04 	call	0x984	; 0x984 <__mulsf3>
     552:	6b a3       	std	Y+35, r22	; 0x23
     554:	7c a3       	std	Y+36, r23	; 0x24
     556:	8d a3       	std	Y+37, r24	; 0x25
     558:	9e a3       	std	Y+38, r25	; 0x26
		
		Xg = Gyro_x/16.4;
     55a:	23 e3       	ldi	r18, 0x33	; 51
     55c:	33 e3       	ldi	r19, 0x33	; 51
     55e:	43 e8       	ldi	r20, 0x83	; 131
     560:	51 e4       	ldi	r21, 0x41	; 65
     562:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <Gyro_x>
     566:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <Gyro_x+0x1>
     56a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Gyro_x+0x2>
     56e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <Gyro_x+0x3>
     572:	0e 94 c2 03 	call	0x784	; 0x784 <__divsf3>
     576:	6f a3       	std	Y+39, r22	; 0x27
     578:	78 a7       	std	Y+40, r23	; 0x28
     57a:	89 a7       	std	Y+41, r24	; 0x29
     57c:	9a a7       	std	Y+42, r25	; 0x2a
		Yg = Gyro_y/16.4;
     57e:	23 e3       	ldi	r18, 0x33	; 51
     580:	33 e3       	ldi	r19, 0x33	; 51
     582:	43 e8       	ldi	r20, 0x83	; 131
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Gyro_y>
     58a:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <Gyro_y+0x1>
     58e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Gyro_y+0x2>
     592:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <Gyro_y+0x3>
     596:	0e 94 c2 03 	call	0x784	; 0x784 <__divsf3>
     59a:	6b a7       	std	Y+43, r22	; 0x2b
     59c:	7c a7       	std	Y+44, r23	; 0x2c
     59e:	8d a7       	std	Y+45, r24	; 0x2d
     5a0:	9e a7       	std	Y+46, r25	; 0x2e
		Zg = Gyro_z/16.4;
     5a2:	23 e3       	ldi	r18, 0x33	; 51
     5a4:	33 e3       	ldi	r19, 0x33	; 51
     5a6:	43 e8       	ldi	r20, 0x83	; 131
     5a8:	51 e4       	ldi	r21, 0x41	; 65
     5aa:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <Gyro_z>
     5ae:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <Gyro_z+0x1>
     5b2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <Gyro_z+0x2>
     5b6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <Gyro_z+0x3>
     5ba:	0e 94 c2 03 	call	0x784	; 0x784 <__divsf3>
     5be:	6f a7       	std	Y+47, r22	; 0x2f
     5c0:	78 ab       	std	Y+48, r23	; 0x30
     5c2:	89 ab       	std	Y+49, r24	; 0x31
     5c4:	9a ab       	std	Y+50, r25	; 0x32


		dtostrf( Xa, 3, 2, float_ );					/* Take values in buffer to send all parameters over USART */
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e8       	ldi	r20, 0x80	; 128
     5cc:	58 e3       	ldi	r21, 0x38	; 56
     5ce:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <Acc_x>
     5d2:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <Acc_x+0x1>
     5d6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <Acc_x+0x2>
     5da:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <Acc_x+0x3>
     5de:	0e 94 c2 04 	call	0x984	; 0x984 <__mulsf3>
     5e2:	87 01       	movw	r16, r14
     5e4:	22 e0       	ldi	r18, 0x02	; 2
     5e6:	43 e0       	ldi	r20, 0x03	; 3
     5e8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dtostrf>
		sprintf(buffer," Ax = %s g\t",float_);
     5ec:	ff 92       	push	r15
     5ee:	ef 92       	push	r14
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	df 92       	push	r13
     5fa:	cf 92       	push	r12
     5fc:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
		USART_SendString(buffer);
     600:	c6 01       	movw	r24, r12
     602:	0e 94 b3 03 	call	0x766	; 0x766 <USART_SendString>

		dtostrf( Ya, 3, 2, float_ );
     606:	22 e0       	ldi	r18, 0x02	; 2
     608:	43 e0       	ldi	r20, 0x03	; 3
     60a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     60c:	78 a1       	ldd	r23, Y+32	; 0x20
     60e:	89 a1       	ldd	r24, Y+33	; 0x21
     610:	9a a1       	ldd	r25, Y+34	; 0x22
     612:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dtostrf>
		sprintf(buffer," Ay = %s g\t",float_);
     616:	ff 92       	push	r15
     618:	ef 92       	push	r14
     61a:	8c e0       	ldi	r24, 0x0C	; 12
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	df 92       	push	r13
     624:	cf 92       	push	r12
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
		USART_SendString(buffer);
     62a:	c6 01       	movw	r24, r12
     62c:	0e 94 b3 03 	call	0x766	; 0x766 <USART_SendString>
		
		dtostrf( Za, 3, 2, float_ );
     630:	22 e0       	ldi	r18, 0x02	; 2
     632:	43 e0       	ldi	r20, 0x03	; 3
     634:	6b a1       	ldd	r22, Y+35	; 0x23
     636:	7c a1       	ldd	r23, Y+36	; 0x24
     638:	8d a1       	ldd	r24, Y+37	; 0x25
     63a:	9e a1       	ldd	r25, Y+38	; 0x26
     63c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dtostrf>
		sprintf(buffer," Az = %s g\t",float_);
     640:	ff 92       	push	r15
     642:	ef 92       	push	r14
     644:	5f 92       	push	r5
     646:	4f 92       	push	r4
     648:	df 92       	push	r13
     64a:	cf 92       	push	r12
     64c:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
		USART_SendString(buffer);
     650:	c6 01       	movw	r24, r12
     652:	0e 94 b3 03 	call	0x766	; 0x766 <USART_SendString>

		dtostrf( Xg, 3, 2, float_ );
     656:	22 e0       	ldi	r18, 0x02	; 2
     658:	43 e0       	ldi	r20, 0x03	; 3
     65a:	6f a1       	ldd	r22, Y+39	; 0x27
     65c:	78 a5       	ldd	r23, Y+40	; 0x28
     65e:	89 a5       	ldd	r24, Y+41	; 0x29
     660:	9a a5       	ldd	r25, Y+42	; 0x2a
     662:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dtostrf>
		sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);
     666:	1f 92       	push	r1
     668:	3f 92       	push	r3
     66a:	ff 92       	push	r15
     66c:	ef 92       	push	r14
     66e:	7f 92       	push	r7
     670:	6f 92       	push	r6
     672:	df 92       	push	r13
     674:	cf 92       	push	r12
     676:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
		USART_SendString(buffer);
     67a:	c6 01       	movw	r24, r12
     67c:	0e 94 b3 03 	call	0x766	; 0x766 <USART_SendString>

		dtostrf( Yg, 3, 2, float_ );
     680:	22 e0       	ldi	r18, 0x02	; 2
     682:	43 e0       	ldi	r20, 0x03	; 3
     684:	6b a5       	ldd	r22, Y+43	; 0x2b
     686:	7c a5       	ldd	r23, Y+44	; 0x2c
     688:	8d a5       	ldd	r24, Y+45	; 0x2d
     68a:	9e a5       	ldd	r25, Y+46	; 0x2e
     68c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dtostrf>
		sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);
     690:	1f 92       	push	r1
     692:	3f 92       	push	r3
     694:	ff 92       	push	r15
     696:	ef 92       	push	r14
     698:	9f 92       	push	r9
     69a:	8f 92       	push	r8
     69c:	df 92       	push	r13
     69e:	cf 92       	push	r12
     6a0:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
		USART_SendString(buffer);
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	c6 01       	movw	r24, r12
     6b0:	0e 94 b3 03 	call	0x766	; 0x766 <USART_SendString>
		
		dtostrf( Zg, 3, 2, float_ );
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	43 e0       	ldi	r20, 0x03	; 3
     6b8:	6f a5       	ldd	r22, Y+47	; 0x2f
     6ba:	78 a9       	ldd	r23, Y+48	; 0x30
     6bc:	89 a9       	ldd	r24, Y+49	; 0x31
     6be:	9a a9       	ldd	r25, Y+50	; 0x32
     6c0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <dtostrf>
		sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);
     6c4:	1f 92       	push	r1
     6c6:	3f 92       	push	r3
     6c8:	ff 92       	push	r15
     6ca:	ef 92       	push	r14
     6cc:	bf 92       	push	r11
     6ce:	af 92       	push	r10
     6d0:	df 92       	push	r13
     6d2:	cf 92       	push	r12
     6d4:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
		USART_SendString(buffer);
     6d8:	c6 01       	movw	r24, r12
     6da:	0e 94 b3 03 	call	0x766	; 0x766 <USART_SendString>
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	23 ed       	ldi	r18, 0xD3	; 211
     6e2:	80 e3       	ldi	r24, 0x30	; 48
     6e4:	91 50       	subi	r25, 0x01	; 1
     6e6:	20 40       	sbci	r18, 0x00	; 0
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <main+0x244>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x24e>
     6ee:	00 00       	nop
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	09 cf       	rjmp	.-494    	; 0x50e <main+0x6e>

000006fc <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */ 
}
     6fc:	28 e1       	ldi	r18, 0x18	; 24
     6fe:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	aa 1f       	adc	r26, r26
     70c:	bb 1f       	adc	r27, r27
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	aa 1f       	adc	r26, r26
     714:	bb 1f       	adc	r27, r27
     716:	9c 01       	movw	r18, r24
     718:	ad 01       	movw	r20, r26
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	44 1f       	adc	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	44 1f       	adc	r20, r20
     728:	55 1f       	adc	r21, r21
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	74 e2       	ldi	r23, 0x24	; 36
     72e:	84 ef       	ldi	r24, 0xF4	; 244
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__udivmodsi4>
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	82 0f       	add	r24, r18
     73a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     73e:	da 01       	movw	r26, r20
     740:	c9 01       	movw	r24, r18
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	a1 09       	sbc	r26, r1
     746:	b1 09       	sbc	r27, r1
     748:	89 2f       	mov	r24, r25
     74a:	9a 2f       	mov	r25, r26
     74c:	ab 2f       	mov	r26, r27
     74e:	bb 27       	eor	r27, r27
     750:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     754:	08 95       	ret

00000756 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
     756:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     75a:	e0 ec       	ldi	r30, 0xC0	; 192
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	85 ff       	sbrs	r24, 5
     762:	fd cf       	rjmp	.-6      	; 0x75e <USART_TxChar+0x8>
}
     764:	08 95       	ret

00000766 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     76c:	88 81       	ld	r24, Y
     76e:	88 23       	and	r24, r24
     770:	31 f0       	breq	.+12     	; 0x77e <USART_SendString+0x18>
     772:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     774:	0e 94 ab 03 	call	0x756	; 0x756 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     778:	89 91       	ld	r24, Y+
     77a:	81 11       	cpse	r24, r1
     77c:	fb cf       	rjmp	.-10     	; 0x774 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <__divsf3>:
     784:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3x>
     788:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_round>
     78c:	0e 94 81 04 	call	0x902	; 0x902 <__fp_pscB>
     790:	58 f0       	brcs	.+22     	; 0x7a8 <__divsf3+0x24>
     792:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_pscA>
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__divsf3+0x24>
     798:	29 f4       	brne	.+10     	; 0x7a4 <__divsf3+0x20>
     79a:	5f 3f       	cpi	r21, 0xFF	; 255
     79c:	29 f0       	breq	.+10     	; 0x7a8 <__divsf3+0x24>
     79e:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     7a2:	51 11       	cpse	r21, r1
     7a4:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_szero>
     7a8:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_nan>

000007ac <__divsf3x>:
     7ac:	0e 94 99 04 	call	0x932	; 0x932 <__fp_split3>
     7b0:	68 f3       	brcs	.-38     	; 0x78c <__divsf3+0x8>

000007b2 <__divsf3_pse>:
     7b2:	99 23       	and	r25, r25
     7b4:	b1 f3       	breq	.-20     	; 0x7a2 <__divsf3+0x1e>
     7b6:	55 23       	and	r21, r21
     7b8:	91 f3       	breq	.-28     	; 0x79e <__divsf3+0x1a>
     7ba:	95 1b       	sub	r25, r21
     7bc:	55 0b       	sbc	r21, r21
     7be:	bb 27       	eor	r27, r27
     7c0:	aa 27       	eor	r26, r26
     7c2:	62 17       	cp	r22, r18
     7c4:	73 07       	cpc	r23, r19
     7c6:	84 07       	cpc	r24, r20
     7c8:	38 f0       	brcs	.+14     	; 0x7d8 <__divsf3_pse+0x26>
     7ca:	9f 5f       	subi	r25, 0xFF	; 255
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	22 0f       	add	r18, r18
     7d0:	33 1f       	adc	r19, r19
     7d2:	44 1f       	adc	r20, r20
     7d4:	aa 1f       	adc	r26, r26
     7d6:	a9 f3       	breq	.-22     	; 0x7c2 <__divsf3_pse+0x10>
     7d8:	35 d0       	rcall	.+106    	; 0x844 <__divsf3_pse+0x92>
     7da:	0e 2e       	mov	r0, r30
     7dc:	3a f0       	brmi	.+14     	; 0x7ec <__divsf3_pse+0x3a>
     7de:	e0 e8       	ldi	r30, 0x80	; 128
     7e0:	32 d0       	rcall	.+100    	; 0x846 <__divsf3_pse+0x94>
     7e2:	91 50       	subi	r25, 0x01	; 1
     7e4:	50 40       	sbci	r21, 0x00	; 0
     7e6:	e6 95       	lsr	r30
     7e8:	00 1c       	adc	r0, r0
     7ea:	ca f7       	brpl	.-14     	; 0x7de <__divsf3_pse+0x2c>
     7ec:	2b d0       	rcall	.+86     	; 0x844 <__divsf3_pse+0x92>
     7ee:	fe 2f       	mov	r31, r30
     7f0:	29 d0       	rcall	.+82     	; 0x844 <__divsf3_pse+0x92>
     7f2:	66 0f       	add	r22, r22
     7f4:	77 1f       	adc	r23, r23
     7f6:	88 1f       	adc	r24, r24
     7f8:	bb 1f       	adc	r27, r27
     7fa:	26 17       	cp	r18, r22
     7fc:	37 07       	cpc	r19, r23
     7fe:	48 07       	cpc	r20, r24
     800:	ab 07       	cpc	r26, r27
     802:	b0 e8       	ldi	r27, 0x80	; 128
     804:	09 f0       	breq	.+2      	; 0x808 <__divsf3_pse+0x56>
     806:	bb 0b       	sbc	r27, r27
     808:	80 2d       	mov	r24, r0
     80a:	bf 01       	movw	r22, r30
     80c:	ff 27       	eor	r31, r31
     80e:	93 58       	subi	r25, 0x83	; 131
     810:	5f 4f       	sbci	r21, 0xFF	; 255
     812:	3a f0       	brmi	.+14     	; 0x822 <__divsf3_pse+0x70>
     814:	9e 3f       	cpi	r25, 0xFE	; 254
     816:	51 05       	cpc	r21, r1
     818:	78 f0       	brcs	.+30     	; 0x838 <__divsf3_pse+0x86>
     81a:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     81e:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_szero>
     822:	5f 3f       	cpi	r21, 0xFF	; 255
     824:	e4 f3       	brlt	.-8      	; 0x81e <__divsf3_pse+0x6c>
     826:	98 3e       	cpi	r25, 0xE8	; 232
     828:	d4 f3       	brlt	.-12     	; 0x81e <__divsf3_pse+0x6c>
     82a:	86 95       	lsr	r24
     82c:	77 95       	ror	r23
     82e:	67 95       	ror	r22
     830:	b7 95       	ror	r27
     832:	f7 95       	ror	r31
     834:	9f 5f       	subi	r25, 0xFF	; 255
     836:	c9 f7       	brne	.-14     	; 0x82a <__divsf3_pse+0x78>
     838:	88 0f       	add	r24, r24
     83a:	91 1d       	adc	r25, r1
     83c:	96 95       	lsr	r25
     83e:	87 95       	ror	r24
     840:	97 f9       	bld	r25, 7
     842:	08 95       	ret
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	66 0f       	add	r22, r22
     848:	77 1f       	adc	r23, r23
     84a:	88 1f       	adc	r24, r24
     84c:	bb 1f       	adc	r27, r27
     84e:	62 17       	cp	r22, r18
     850:	73 07       	cpc	r23, r19
     852:	84 07       	cpc	r24, r20
     854:	ba 07       	cpc	r27, r26
     856:	20 f0       	brcs	.+8      	; 0x860 <__divsf3_pse+0xae>
     858:	62 1b       	sub	r22, r18
     85a:	73 0b       	sbc	r23, r19
     85c:	84 0b       	sbc	r24, r20
     85e:	ba 0b       	sbc	r27, r26
     860:	ee 1f       	adc	r30, r30
     862:	88 f7       	brcc	.-30     	; 0x846 <__divsf3_pse+0x94>
     864:	e0 95       	com	r30
     866:	08 95       	ret

00000868 <__floatunsisf>:
     868:	e8 94       	clt
     86a:	09 c0       	rjmp	.+18     	; 0x87e <__floatsisf+0x12>

0000086c <__floatsisf>:
     86c:	97 fb       	bst	r25, 7
     86e:	3e f4       	brtc	.+14     	; 0x87e <__floatsisf+0x12>
     870:	90 95       	com	r25
     872:	80 95       	com	r24
     874:	70 95       	com	r23
     876:	61 95       	neg	r22
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	8f 4f       	sbci	r24, 0xFF	; 255
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	99 23       	and	r25, r25
     880:	a9 f0       	breq	.+42     	; 0x8ac <__floatsisf+0x40>
     882:	f9 2f       	mov	r31, r25
     884:	96 e9       	ldi	r25, 0x96	; 150
     886:	bb 27       	eor	r27, r27
     888:	93 95       	inc	r25
     88a:	f6 95       	lsr	r31
     88c:	87 95       	ror	r24
     88e:	77 95       	ror	r23
     890:	67 95       	ror	r22
     892:	b7 95       	ror	r27
     894:	f1 11       	cpse	r31, r1
     896:	f8 cf       	rjmp	.-16     	; 0x888 <__floatsisf+0x1c>
     898:	fa f4       	brpl	.+62     	; 0x8d8 <__floatsisf+0x6c>
     89a:	bb 0f       	add	r27, r27
     89c:	11 f4       	brne	.+4      	; 0x8a2 <__floatsisf+0x36>
     89e:	60 ff       	sbrs	r22, 0
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__floatsisf+0x6c>
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	8f 4f       	sbci	r24, 0xFF	; 255
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <__floatsisf+0x6c>
     8ac:	88 23       	and	r24, r24
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <__floatsisf+0x48>
     8b0:	96 e9       	ldi	r25, 0x96	; 150
     8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <__floatsisf+0x6a>
     8b4:	77 23       	and	r23, r23
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <__floatsisf+0x54>
     8b8:	9e e8       	ldi	r25, 0x8E	; 142
     8ba:	87 2f       	mov	r24, r23
     8bc:	76 2f       	mov	r23, r22
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__floatsisf+0x5e>
     8c0:	66 23       	and	r22, r22
     8c2:	71 f0       	breq	.+28     	; 0x8e0 <__floatsisf+0x74>
     8c4:	96 e8       	ldi	r25, 0x86	; 134
     8c6:	86 2f       	mov	r24, r22
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	2a f0       	brmi	.+10     	; 0x8d8 <__floatsisf+0x6c>
     8ce:	9a 95       	dec	r25
     8d0:	66 0f       	add	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	88 1f       	adc	r24, r24
     8d6:	da f7       	brpl	.-10     	; 0x8ce <__floatsisf+0x62>
     8d8:	88 0f       	add	r24, r24
     8da:	96 95       	lsr	r25
     8dc:	87 95       	ror	r24
     8de:	97 f9       	bld	r25, 7
     8e0:	08 95       	ret

000008e2 <__fp_inf>:
     8e2:	97 f9       	bld	r25, 7
     8e4:	9f 67       	ori	r25, 0x7F	; 127
     8e6:	80 e8       	ldi	r24, 0x80	; 128
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	08 95       	ret

000008ee <__fp_nan>:
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	80 ec       	ldi	r24, 0xC0	; 192
     8f2:	08 95       	ret

000008f4 <__fp_pscA>:
     8f4:	00 24       	eor	r0, r0
     8f6:	0a 94       	dec	r0
     8f8:	16 16       	cp	r1, r22
     8fa:	17 06       	cpc	r1, r23
     8fc:	18 06       	cpc	r1, r24
     8fe:	09 06       	cpc	r0, r25
     900:	08 95       	ret

00000902 <__fp_pscB>:
     902:	00 24       	eor	r0, r0
     904:	0a 94       	dec	r0
     906:	12 16       	cp	r1, r18
     908:	13 06       	cpc	r1, r19
     90a:	14 06       	cpc	r1, r20
     90c:	05 06       	cpc	r0, r21
     90e:	08 95       	ret

00000910 <__fp_round>:
     910:	09 2e       	mov	r0, r25
     912:	03 94       	inc	r0
     914:	00 0c       	add	r0, r0
     916:	11 f4       	brne	.+4      	; 0x91c <__fp_round+0xc>
     918:	88 23       	and	r24, r24
     91a:	52 f0       	brmi	.+20     	; 0x930 <__fp_round+0x20>
     91c:	bb 0f       	add	r27, r27
     91e:	40 f4       	brcc	.+16     	; 0x930 <__fp_round+0x20>
     920:	bf 2b       	or	r27, r31
     922:	11 f4       	brne	.+4      	; 0x928 <__fp_round+0x18>
     924:	60 ff       	sbrs	r22, 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__fp_round+0x20>
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	8f 4f       	sbci	r24, 0xFF	; 255
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	08 95       	ret

00000932 <__fp_split3>:
     932:	57 fd       	sbrc	r21, 7
     934:	90 58       	subi	r25, 0x80	; 128
     936:	44 0f       	add	r20, r20
     938:	55 1f       	adc	r21, r21
     93a:	59 f0       	breq	.+22     	; 0x952 <__fp_splitA+0x10>
     93c:	5f 3f       	cpi	r21, 0xFF	; 255
     93e:	71 f0       	breq	.+28     	; 0x95c <__fp_splitA+0x1a>
     940:	47 95       	ror	r20

00000942 <__fp_splitA>:
     942:	88 0f       	add	r24, r24
     944:	97 fb       	bst	r25, 7
     946:	99 1f       	adc	r25, r25
     948:	61 f0       	breq	.+24     	; 0x962 <__fp_splitA+0x20>
     94a:	9f 3f       	cpi	r25, 0xFF	; 255
     94c:	79 f0       	breq	.+30     	; 0x96c <__fp_splitA+0x2a>
     94e:	87 95       	ror	r24
     950:	08 95       	ret
     952:	12 16       	cp	r1, r18
     954:	13 06       	cpc	r1, r19
     956:	14 06       	cpc	r1, r20
     958:	55 1f       	adc	r21, r21
     95a:	f2 cf       	rjmp	.-28     	; 0x940 <__fp_split3+0xe>
     95c:	46 95       	lsr	r20
     95e:	f1 df       	rcall	.-30     	; 0x942 <__fp_splitA>
     960:	08 c0       	rjmp	.+16     	; 0x972 <__fp_splitA+0x30>
     962:	16 16       	cp	r1, r22
     964:	17 06       	cpc	r1, r23
     966:	18 06       	cpc	r1, r24
     968:	99 1f       	adc	r25, r25
     96a:	f1 cf       	rjmp	.-30     	; 0x94e <__fp_splitA+0xc>
     96c:	86 95       	lsr	r24
     96e:	71 05       	cpc	r23, r1
     970:	61 05       	cpc	r22, r1
     972:	08 94       	sec
     974:	08 95       	ret

00000976 <__fp_zero>:
     976:	e8 94       	clt

00000978 <__fp_szero>:
     978:	bb 27       	eor	r27, r27
     97a:	66 27       	eor	r22, r22
     97c:	77 27       	eor	r23, r23
     97e:	cb 01       	movw	r24, r22
     980:	97 f9       	bld	r25, 7
     982:	08 95       	ret

00000984 <__mulsf3>:
     984:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__mulsf3x>
     988:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_round>
     98c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_pscA>
     990:	38 f0       	brcs	.+14     	; 0x9a0 <__mulsf3+0x1c>
     992:	0e 94 81 04 	call	0x902	; 0x902 <__fp_pscB>
     996:	20 f0       	brcs	.+8      	; 0x9a0 <__mulsf3+0x1c>
     998:	95 23       	and	r25, r21
     99a:	11 f0       	breq	.+4      	; 0x9a0 <__mulsf3+0x1c>
     99c:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     9a0:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_nan>
     9a4:	11 24       	eor	r1, r1
     9a6:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_szero>

000009aa <__mulsf3x>:
     9aa:	0e 94 99 04 	call	0x932	; 0x932 <__fp_split3>
     9ae:	70 f3       	brcs	.-36     	; 0x98c <__mulsf3+0x8>

000009b0 <__mulsf3_pse>:
     9b0:	95 9f       	mul	r25, r21
     9b2:	c1 f3       	breq	.-16     	; 0x9a4 <__mulsf3+0x20>
     9b4:	95 0f       	add	r25, r21
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	55 1f       	adc	r21, r21
     9ba:	62 9f       	mul	r22, r18
     9bc:	f0 01       	movw	r30, r0
     9be:	72 9f       	mul	r23, r18
     9c0:	bb 27       	eor	r27, r27
     9c2:	f0 0d       	add	r31, r0
     9c4:	b1 1d       	adc	r27, r1
     9c6:	63 9f       	mul	r22, r19
     9c8:	aa 27       	eor	r26, r26
     9ca:	f0 0d       	add	r31, r0
     9cc:	b1 1d       	adc	r27, r1
     9ce:	aa 1f       	adc	r26, r26
     9d0:	64 9f       	mul	r22, r20
     9d2:	66 27       	eor	r22, r22
     9d4:	b0 0d       	add	r27, r0
     9d6:	a1 1d       	adc	r26, r1
     9d8:	66 1f       	adc	r22, r22
     9da:	82 9f       	mul	r24, r18
     9dc:	22 27       	eor	r18, r18
     9de:	b0 0d       	add	r27, r0
     9e0:	a1 1d       	adc	r26, r1
     9e2:	62 1f       	adc	r22, r18
     9e4:	73 9f       	mul	r23, r19
     9e6:	b0 0d       	add	r27, r0
     9e8:	a1 1d       	adc	r26, r1
     9ea:	62 1f       	adc	r22, r18
     9ec:	83 9f       	mul	r24, r19
     9ee:	a0 0d       	add	r26, r0
     9f0:	61 1d       	adc	r22, r1
     9f2:	22 1f       	adc	r18, r18
     9f4:	74 9f       	mul	r23, r20
     9f6:	33 27       	eor	r19, r19
     9f8:	a0 0d       	add	r26, r0
     9fa:	61 1d       	adc	r22, r1
     9fc:	23 1f       	adc	r18, r19
     9fe:	84 9f       	mul	r24, r20
     a00:	60 0d       	add	r22, r0
     a02:	21 1d       	adc	r18, r1
     a04:	82 2f       	mov	r24, r18
     a06:	76 2f       	mov	r23, r22
     a08:	6a 2f       	mov	r22, r26
     a0a:	11 24       	eor	r1, r1
     a0c:	9f 57       	subi	r25, 0x7F	; 127
     a0e:	50 40       	sbci	r21, 0x00	; 0
     a10:	9a f0       	brmi	.+38     	; 0xa38 <__mulsf3_pse+0x88>
     a12:	f1 f0       	breq	.+60     	; 0xa50 <__mulsf3_pse+0xa0>
     a14:	88 23       	and	r24, r24
     a16:	4a f0       	brmi	.+18     	; 0xa2a <__mulsf3_pse+0x7a>
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	bb 1f       	adc	r27, r27
     a1e:	66 1f       	adc	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	88 1f       	adc	r24, r24
     a24:	91 50       	subi	r25, 0x01	; 1
     a26:	50 40       	sbci	r21, 0x00	; 0
     a28:	a9 f7       	brne	.-22     	; 0xa14 <__mulsf3_pse+0x64>
     a2a:	9e 3f       	cpi	r25, 0xFE	; 254
     a2c:	51 05       	cpc	r21, r1
     a2e:	80 f0       	brcs	.+32     	; 0xa50 <__mulsf3_pse+0xa0>
     a30:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_inf>
     a34:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_szero>
     a38:	5f 3f       	cpi	r21, 0xFF	; 255
     a3a:	e4 f3       	brlt	.-8      	; 0xa34 <__mulsf3_pse+0x84>
     a3c:	98 3e       	cpi	r25, 0xE8	; 232
     a3e:	d4 f3       	brlt	.-12     	; 0xa34 <__mulsf3_pse+0x84>
     a40:	86 95       	lsr	r24
     a42:	77 95       	ror	r23
     a44:	67 95       	ror	r22
     a46:	b7 95       	ror	r27
     a48:	f7 95       	ror	r31
     a4a:	e7 95       	ror	r30
     a4c:	9f 5f       	subi	r25, 0xFF	; 255
     a4e:	c1 f7       	brne	.-16     	; 0xa40 <__mulsf3_pse+0x90>
     a50:	fe 2b       	or	r31, r30
     a52:	88 0f       	add	r24, r24
     a54:	91 1d       	adc	r25, r1
     a56:	96 95       	lsr	r25
     a58:	87 95       	ror	r24
     a5a:	97 f9       	bld	r25, 7
     a5c:	08 95       	ret

00000a5e <__udivmodsi4>:
     a5e:	a1 e2       	ldi	r26, 0x21	; 33
     a60:	1a 2e       	mov	r1, r26
     a62:	aa 1b       	sub	r26, r26
     a64:	bb 1b       	sub	r27, r27
     a66:	fd 01       	movw	r30, r26
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <__udivmodsi4_ep>

00000a6a <__udivmodsi4_loop>:
     a6a:	aa 1f       	adc	r26, r26
     a6c:	bb 1f       	adc	r27, r27
     a6e:	ee 1f       	adc	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	a2 17       	cp	r26, r18
     a74:	b3 07       	cpc	r27, r19
     a76:	e4 07       	cpc	r30, r20
     a78:	f5 07       	cpc	r31, r21
     a7a:	20 f0       	brcs	.+8      	; 0xa84 <__udivmodsi4_ep>
     a7c:	a2 1b       	sub	r26, r18
     a7e:	b3 0b       	sbc	r27, r19
     a80:	e4 0b       	sbc	r30, r20
     a82:	f5 0b       	sbc	r31, r21

00000a84 <__udivmodsi4_ep>:
     a84:	66 1f       	adc	r22, r22
     a86:	77 1f       	adc	r23, r23
     a88:	88 1f       	adc	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	1a 94       	dec	r1
     a8e:	69 f7       	brne	.-38     	; 0xa6a <__udivmodsi4_loop>
     a90:	60 95       	com	r22
     a92:	70 95       	com	r23
     a94:	80 95       	com	r24
     a96:	90 95       	com	r25
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	bd 01       	movw	r22, r26
     a9e:	cf 01       	movw	r24, r30
     aa0:	08 95       	ret

00000aa2 <dtostrf>:
     aa2:	ef 92       	push	r14
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	e8 01       	movw	r28, r16
     aae:	47 fd       	sbrc	r20, 7
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <dtostrf+0x14>
     ab2:	34 e0       	ldi	r19, 0x04	; 4
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <dtostrf+0x16>
     ab6:	34 e1       	ldi	r19, 0x14	; 20
     ab8:	04 2e       	mov	r0, r20
     aba:	00 0c       	add	r0, r0
     abc:	55 0b       	sbc	r21, r21
     abe:	57 ff       	sbrs	r21, 7
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <dtostrf+0x26>
     ac2:	51 95       	neg	r21
     ac4:	41 95       	neg	r20
     ac6:	51 09       	sbc	r21, r1
     ac8:	e3 2e       	mov	r14, r19
     aca:	02 2f       	mov	r16, r18
     acc:	24 2f       	mov	r18, r20
     ace:	ae 01       	movw	r20, r28
     ad0:	0e 94 74 07 	call	0xee8	; 0xee8 <dtoa_prf>
     ad4:	ce 01       	movw	r24, r28
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <sprintf>:
     ae2:	ae e0       	ldi	r26, 0x0E	; 14
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__prologue_saves__+0x1c>
     aee:	0d 89       	ldd	r16, Y+21	; 0x15
     af0:	1e 89       	ldd	r17, Y+22	; 0x16
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	8c 83       	std	Y+4, r24	; 0x04
     af6:	1a 83       	std	Y+2, r17	; 0x02
     af8:	09 83       	std	Y+1, r16	; 0x01
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	9f e7       	ldi	r25, 0x7F	; 127
     afe:	9e 83       	std	Y+6, r25	; 0x06
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	ae 01       	movw	r20, r28
     b04:	47 5e       	subi	r20, 0xE7	; 231
     b06:	5f 4f       	sbci	r21, 0xFF	; 255
     b08:	6f 89       	ldd	r22, Y+23	; 0x17
     b0a:	78 8d       	ldd	r23, Y+24	; 0x18
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 93 05 	call	0xb26	; 0xb26 <vfprintf>
     b14:	ef 81       	ldd	r30, Y+7	; 0x07
     b16:	f8 85       	ldd	r31, Y+8	; 0x08
     b18:	e0 0f       	add	r30, r16
     b1a:	f1 1f       	adc	r31, r17
     b1c:	10 82       	st	Z, r1
     b1e:	2e 96       	adiw	r28, 0x0e	; 14
     b20:	e4 e0       	ldi	r30, 0x04	; 4
     b22:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__epilogue_restores__+0x1c>

00000b26 <vfprintf>:
     b26:	ab e0       	ldi	r26, 0x0B	; 11
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	e9 e9       	ldi	r30, 0x99	; 153
     b2c:	f5 e0       	ldi	r31, 0x05	; 5
     b2e:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__prologue_saves__>
     b32:	6c 01       	movw	r12, r24
     b34:	7b 01       	movw	r14, r22
     b36:	8a 01       	movw	r16, r20
     b38:	fc 01       	movw	r30, r24
     b3a:	17 82       	std	Z+7, r1	; 0x07
     b3c:	16 82       	std	Z+6, r1	; 0x06
     b3e:	83 81       	ldd	r24, Z+3	; 0x03
     b40:	81 ff       	sbrs	r24, 1
     b42:	cc c1       	rjmp	.+920    	; 0xedc <vfprintf+0x3b6>
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	3c 01       	movw	r6, r24
     b4a:	f6 01       	movw	r30, r12
     b4c:	93 81       	ldd	r25, Z+3	; 0x03
     b4e:	f7 01       	movw	r30, r14
     b50:	93 fd       	sbrc	r25, 3
     b52:	85 91       	lpm	r24, Z+
     b54:	93 ff       	sbrs	r25, 3
     b56:	81 91       	ld	r24, Z+
     b58:	7f 01       	movw	r14, r30
     b5a:	88 23       	and	r24, r24
     b5c:	09 f4       	brne	.+2      	; 0xb60 <vfprintf+0x3a>
     b5e:	ba c1       	rjmp	.+884    	; 0xed4 <vfprintf+0x3ae>
     b60:	85 32       	cpi	r24, 0x25	; 37
     b62:	39 f4       	brne	.+14     	; 0xb72 <vfprintf+0x4c>
     b64:	93 fd       	sbrc	r25, 3
     b66:	85 91       	lpm	r24, Z+
     b68:	93 ff       	sbrs	r25, 3
     b6a:	81 91       	ld	r24, Z+
     b6c:	7f 01       	movw	r14, r30
     b6e:	85 32       	cpi	r24, 0x25	; 37
     b70:	29 f4       	brne	.+10     	; 0xb7c <vfprintf+0x56>
     b72:	b6 01       	movw	r22, r12
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     b7a:	e7 cf       	rjmp	.-50     	; 0xb4a <vfprintf+0x24>
     b7c:	91 2c       	mov	r9, r1
     b7e:	21 2c       	mov	r2, r1
     b80:	31 2c       	mov	r3, r1
     b82:	ff e1       	ldi	r31, 0x1F	; 31
     b84:	f3 15       	cp	r31, r3
     b86:	d8 f0       	brcs	.+54     	; 0xbbe <vfprintf+0x98>
     b88:	8b 32       	cpi	r24, 0x2B	; 43
     b8a:	79 f0       	breq	.+30     	; 0xbaa <vfprintf+0x84>
     b8c:	38 f4       	brcc	.+14     	; 0xb9c <vfprintf+0x76>
     b8e:	80 32       	cpi	r24, 0x20	; 32
     b90:	79 f0       	breq	.+30     	; 0xbb0 <vfprintf+0x8a>
     b92:	83 32       	cpi	r24, 0x23	; 35
     b94:	a1 f4       	brne	.+40     	; 0xbbe <vfprintf+0x98>
     b96:	23 2d       	mov	r18, r3
     b98:	20 61       	ori	r18, 0x10	; 16
     b9a:	1d c0       	rjmp	.+58     	; 0xbd6 <vfprintf+0xb0>
     b9c:	8d 32       	cpi	r24, 0x2D	; 45
     b9e:	61 f0       	breq	.+24     	; 0xbb8 <vfprintf+0x92>
     ba0:	80 33       	cpi	r24, 0x30	; 48
     ba2:	69 f4       	brne	.+26     	; 0xbbe <vfprintf+0x98>
     ba4:	23 2d       	mov	r18, r3
     ba6:	21 60       	ori	r18, 0x01	; 1
     ba8:	16 c0       	rjmp	.+44     	; 0xbd6 <vfprintf+0xb0>
     baa:	83 2d       	mov	r24, r3
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	38 2e       	mov	r3, r24
     bb0:	e3 2d       	mov	r30, r3
     bb2:	e4 60       	ori	r30, 0x04	; 4
     bb4:	3e 2e       	mov	r3, r30
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <vfprintf+0xe6>
     bb8:	f3 2d       	mov	r31, r3
     bba:	f8 60       	ori	r31, 0x08	; 8
     bbc:	1d c0       	rjmp	.+58     	; 0xbf8 <vfprintf+0xd2>
     bbe:	37 fc       	sbrc	r3, 7
     bc0:	2d c0       	rjmp	.+90     	; 0xc1c <vfprintf+0xf6>
     bc2:	20 ed       	ldi	r18, 0xD0	; 208
     bc4:	28 0f       	add	r18, r24
     bc6:	2a 30       	cpi	r18, 0x0A	; 10
     bc8:	40 f0       	brcs	.+16     	; 0xbda <vfprintf+0xb4>
     bca:	8e 32       	cpi	r24, 0x2E	; 46
     bcc:	b9 f4       	brne	.+46     	; 0xbfc <vfprintf+0xd6>
     bce:	36 fc       	sbrc	r3, 6
     bd0:	81 c1       	rjmp	.+770    	; 0xed4 <vfprintf+0x3ae>
     bd2:	23 2d       	mov	r18, r3
     bd4:	20 64       	ori	r18, 0x40	; 64
     bd6:	32 2e       	mov	r3, r18
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <vfprintf+0xe6>
     bda:	36 fe       	sbrs	r3, 6
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <vfprintf+0xc4>
     bde:	8a e0       	ldi	r24, 0x0A	; 10
     be0:	98 9e       	mul	r9, r24
     be2:	20 0d       	add	r18, r0
     be4:	11 24       	eor	r1, r1
     be6:	92 2e       	mov	r9, r18
     be8:	11 c0       	rjmp	.+34     	; 0xc0c <vfprintf+0xe6>
     bea:	ea e0       	ldi	r30, 0x0A	; 10
     bec:	2e 9e       	mul	r2, r30
     bee:	20 0d       	add	r18, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	22 2e       	mov	r2, r18
     bf4:	f3 2d       	mov	r31, r3
     bf6:	f0 62       	ori	r31, 0x20	; 32
     bf8:	3f 2e       	mov	r3, r31
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <vfprintf+0xe6>
     bfc:	8c 36       	cpi	r24, 0x6C	; 108
     bfe:	21 f4       	brne	.+8      	; 0xc08 <vfprintf+0xe2>
     c00:	83 2d       	mov	r24, r3
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	38 2e       	mov	r3, r24
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0xe6>
     c08:	88 36       	cpi	r24, 0x68	; 104
     c0a:	41 f4       	brne	.+16     	; 0xc1c <vfprintf+0xf6>
     c0c:	f7 01       	movw	r30, r14
     c0e:	93 fd       	sbrc	r25, 3
     c10:	85 91       	lpm	r24, Z+
     c12:	93 ff       	sbrs	r25, 3
     c14:	81 91       	ld	r24, Z+
     c16:	7f 01       	movw	r14, r30
     c18:	81 11       	cpse	r24, r1
     c1a:	b3 cf       	rjmp	.-154    	; 0xb82 <vfprintf+0x5c>
     c1c:	98 2f       	mov	r25, r24
     c1e:	9f 7d       	andi	r25, 0xDF	; 223
     c20:	95 54       	subi	r25, 0x45	; 69
     c22:	93 30       	cpi	r25, 0x03	; 3
     c24:	28 f4       	brcc	.+10     	; 0xc30 <vfprintf+0x10a>
     c26:	0c 5f       	subi	r16, 0xFC	; 252
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	9f e3       	ldi	r25, 0x3F	; 63
     c2c:	99 83       	std	Y+1, r25	; 0x01
     c2e:	0d c0       	rjmp	.+26     	; 0xc4a <vfprintf+0x124>
     c30:	83 36       	cpi	r24, 0x63	; 99
     c32:	31 f0       	breq	.+12     	; 0xc40 <vfprintf+0x11a>
     c34:	83 37       	cpi	r24, 0x73	; 115
     c36:	71 f0       	breq	.+28     	; 0xc54 <vfprintf+0x12e>
     c38:	83 35       	cpi	r24, 0x53	; 83
     c3a:	09 f0       	breq	.+2      	; 0xc3e <vfprintf+0x118>
     c3c:	59 c0       	rjmp	.+178    	; 0xcf0 <vfprintf+0x1ca>
     c3e:	21 c0       	rjmp	.+66     	; 0xc82 <vfprintf+0x15c>
     c40:	f8 01       	movw	r30, r16
     c42:	80 81       	ld	r24, Z
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	0e 5f       	subi	r16, 0xFE	; 254
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	88 24       	eor	r8, r8
     c4c:	83 94       	inc	r8
     c4e:	91 2c       	mov	r9, r1
     c50:	53 01       	movw	r10, r6
     c52:	13 c0       	rjmp	.+38     	; 0xc7a <vfprintf+0x154>
     c54:	28 01       	movw	r4, r16
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	4f 0e       	add	r4, r31
     c5a:	51 1c       	adc	r5, r1
     c5c:	f8 01       	movw	r30, r16
     c5e:	a0 80       	ld	r10, Z
     c60:	b1 80       	ldd	r11, Z+1	; 0x01
     c62:	36 fe       	sbrs	r3, 6
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <vfprintf+0x146>
     c66:	69 2d       	mov	r22, r9
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x14a>
     c6c:	6f ef       	ldi	r22, 0xFF	; 255
     c6e:	7f ef       	ldi	r23, 0xFF	; 255
     c70:	c5 01       	movw	r24, r10
     c72:	0e 94 b1 09 	call	0x1362	; 0x1362 <strnlen>
     c76:	4c 01       	movw	r8, r24
     c78:	82 01       	movw	r16, r4
     c7a:	f3 2d       	mov	r31, r3
     c7c:	ff 77       	andi	r31, 0x7F	; 127
     c7e:	3f 2e       	mov	r3, r31
     c80:	16 c0       	rjmp	.+44     	; 0xcae <vfprintf+0x188>
     c82:	28 01       	movw	r4, r16
     c84:	22 e0       	ldi	r18, 0x02	; 2
     c86:	42 0e       	add	r4, r18
     c88:	51 1c       	adc	r5, r1
     c8a:	f8 01       	movw	r30, r16
     c8c:	a0 80       	ld	r10, Z
     c8e:	b1 80       	ldd	r11, Z+1	; 0x01
     c90:	36 fe       	sbrs	r3, 6
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <vfprintf+0x174>
     c94:	69 2d       	mov	r22, r9
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x178>
     c9a:	6f ef       	ldi	r22, 0xFF	; 255
     c9c:	7f ef       	ldi	r23, 0xFF	; 255
     c9e:	c5 01       	movw	r24, r10
     ca0:	0e 94 a6 09 	call	0x134c	; 0x134c <strnlen_P>
     ca4:	4c 01       	movw	r8, r24
     ca6:	f3 2d       	mov	r31, r3
     ca8:	f0 68       	ori	r31, 0x80	; 128
     caa:	3f 2e       	mov	r3, r31
     cac:	82 01       	movw	r16, r4
     cae:	33 fc       	sbrc	r3, 3
     cb0:	1b c0       	rjmp	.+54     	; 0xce8 <vfprintf+0x1c2>
     cb2:	82 2d       	mov	r24, r2
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	88 16       	cp	r8, r24
     cb8:	99 06       	cpc	r9, r25
     cba:	b0 f4       	brcc	.+44     	; 0xce8 <vfprintf+0x1c2>
     cbc:	b6 01       	movw	r22, r12
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     cc6:	2a 94       	dec	r2
     cc8:	f4 cf       	rjmp	.-24     	; 0xcb2 <vfprintf+0x18c>
     cca:	f5 01       	movw	r30, r10
     ccc:	37 fc       	sbrc	r3, 7
     cce:	85 91       	lpm	r24, Z+
     cd0:	37 fe       	sbrs	r3, 7
     cd2:	81 91       	ld	r24, Z+
     cd4:	5f 01       	movw	r10, r30
     cd6:	b6 01       	movw	r22, r12
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     cde:	21 10       	cpse	r2, r1
     ce0:	2a 94       	dec	r2
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	82 1a       	sub	r8, r18
     ce6:	91 08       	sbc	r9, r1
     ce8:	81 14       	cp	r8, r1
     cea:	91 04       	cpc	r9, r1
     cec:	71 f7       	brne	.-36     	; 0xcca <vfprintf+0x1a4>
     cee:	e8 c0       	rjmp	.+464    	; 0xec0 <vfprintf+0x39a>
     cf0:	84 36       	cpi	r24, 0x64	; 100
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <vfprintf+0x1d2>
     cf4:	89 36       	cpi	r24, 0x69	; 105
     cf6:	41 f5       	brne	.+80     	; 0xd48 <vfprintf+0x222>
     cf8:	f8 01       	movw	r30, r16
     cfa:	37 fe       	sbrs	r3, 7
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <vfprintf+0x1e6>
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	0c 5f       	subi	r16, 0xFC	; 252
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <vfprintf+0x1f6>
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	07 2e       	mov	r0, r23
     d12:	00 0c       	add	r0, r0
     d14:	88 0b       	sbc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	0e 5f       	subi	r16, 0xFE	; 254
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	f3 2d       	mov	r31, r3
     d1e:	ff 76       	andi	r31, 0x6F	; 111
     d20:	3f 2e       	mov	r3, r31
     d22:	97 ff       	sbrs	r25, 7
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <vfprintf+0x212>
     d26:	90 95       	com	r25
     d28:	80 95       	com	r24
     d2a:	70 95       	com	r23
     d2c:	61 95       	neg	r22
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	8f 4f       	sbci	r24, 0xFF	; 255
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	f0 68       	ori	r31, 0x80	; 128
     d36:	3f 2e       	mov	r3, r31
     d38:	2a e0       	ldi	r18, 0x0A	; 10
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	a3 01       	movw	r20, r6
     d3e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__ultoa_invert>
     d42:	88 2e       	mov	r8, r24
     d44:	86 18       	sub	r8, r6
     d46:	45 c0       	rjmp	.+138    	; 0xdd2 <vfprintf+0x2ac>
     d48:	85 37       	cpi	r24, 0x75	; 117
     d4a:	31 f4       	brne	.+12     	; 0xd58 <vfprintf+0x232>
     d4c:	23 2d       	mov	r18, r3
     d4e:	2f 7e       	andi	r18, 0xEF	; 239
     d50:	b2 2e       	mov	r11, r18
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	25 c0       	rjmp	.+74     	; 0xda2 <vfprintf+0x27c>
     d58:	93 2d       	mov	r25, r3
     d5a:	99 7f       	andi	r25, 0xF9	; 249
     d5c:	b9 2e       	mov	r11, r25
     d5e:	8f 36       	cpi	r24, 0x6F	; 111
     d60:	c1 f0       	breq	.+48     	; 0xd92 <vfprintf+0x26c>
     d62:	18 f4       	brcc	.+6      	; 0xd6a <vfprintf+0x244>
     d64:	88 35       	cpi	r24, 0x58	; 88
     d66:	79 f0       	breq	.+30     	; 0xd86 <vfprintf+0x260>
     d68:	b5 c0       	rjmp	.+362    	; 0xed4 <vfprintf+0x3ae>
     d6a:	80 37       	cpi	r24, 0x70	; 112
     d6c:	19 f0       	breq	.+6      	; 0xd74 <vfprintf+0x24e>
     d6e:	88 37       	cpi	r24, 0x78	; 120
     d70:	21 f0       	breq	.+8      	; 0xd7a <vfprintf+0x254>
     d72:	b0 c0       	rjmp	.+352    	; 0xed4 <vfprintf+0x3ae>
     d74:	e9 2f       	mov	r30, r25
     d76:	e0 61       	ori	r30, 0x10	; 16
     d78:	be 2e       	mov	r11, r30
     d7a:	b4 fe       	sbrs	r11, 4
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <vfprintf+0x272>
     d7e:	fb 2d       	mov	r31, r11
     d80:	f4 60       	ori	r31, 0x04	; 4
     d82:	bf 2e       	mov	r11, r31
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <vfprintf+0x272>
     d86:	34 fe       	sbrs	r3, 4
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <vfprintf+0x278>
     d8a:	29 2f       	mov	r18, r25
     d8c:	26 60       	ori	r18, 0x06	; 6
     d8e:	b2 2e       	mov	r11, r18
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <vfprintf+0x278>
     d92:	28 e0       	ldi	r18, 0x08	; 8
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <vfprintf+0x27c>
     d98:	20 e1       	ldi	r18, 0x10	; 16
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <vfprintf+0x27c>
     d9e:	20 e1       	ldi	r18, 0x10	; 16
     da0:	32 e0       	ldi	r19, 0x02	; 2
     da2:	f8 01       	movw	r30, r16
     da4:	b7 fe       	sbrs	r11, 7
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <vfprintf+0x290>
     da8:	60 81       	ld	r22, Z
     daa:	71 81       	ldd	r23, Z+1	; 0x01
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	0c 5f       	subi	r16, 0xFC	; 252
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <vfprintf+0x29c>
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 5f       	subi	r16, 0xFE	; 254
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	a3 01       	movw	r20, r6
     dc4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__ultoa_invert>
     dc8:	88 2e       	mov	r8, r24
     dca:	86 18       	sub	r8, r6
     dcc:	fb 2d       	mov	r31, r11
     dce:	ff 77       	andi	r31, 0x7F	; 127
     dd0:	3f 2e       	mov	r3, r31
     dd2:	36 fe       	sbrs	r3, 6
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <vfprintf+0x2ca>
     dd6:	23 2d       	mov	r18, r3
     dd8:	2e 7f       	andi	r18, 0xFE	; 254
     dda:	a2 2e       	mov	r10, r18
     ddc:	89 14       	cp	r8, r9
     dde:	58 f4       	brcc	.+22     	; 0xdf6 <vfprintf+0x2d0>
     de0:	34 fe       	sbrs	r3, 4
     de2:	0b c0       	rjmp	.+22     	; 0xdfa <vfprintf+0x2d4>
     de4:	32 fc       	sbrc	r3, 2
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <vfprintf+0x2d4>
     de8:	83 2d       	mov	r24, r3
     dea:	8e 7e       	andi	r24, 0xEE	; 238
     dec:	a8 2e       	mov	r10, r24
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <vfprintf+0x2d4>
     df0:	b8 2c       	mov	r11, r8
     df2:	a3 2c       	mov	r10, r3
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <vfprintf+0x2d6>
     df6:	b8 2c       	mov	r11, r8
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <vfprintf+0x2d6>
     dfa:	b9 2c       	mov	r11, r9
     dfc:	a4 fe       	sbrs	r10, 4
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <vfprintf+0x2f8>
     e00:	fe 01       	movw	r30, r28
     e02:	e8 0d       	add	r30, r8
     e04:	f1 1d       	adc	r31, r1
     e06:	80 81       	ld	r24, Z
     e08:	80 33       	cpi	r24, 0x30	; 48
     e0a:	21 f4       	brne	.+8      	; 0xe14 <vfprintf+0x2ee>
     e0c:	9a 2d       	mov	r25, r10
     e0e:	99 7e       	andi	r25, 0xE9	; 233
     e10:	a9 2e       	mov	r10, r25
     e12:	09 c0       	rjmp	.+18     	; 0xe26 <vfprintf+0x300>
     e14:	a2 fe       	sbrs	r10, 2
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x2fe>
     e18:	b3 94       	inc	r11
     e1a:	b3 94       	inc	r11
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <vfprintf+0x300>
     e1e:	8a 2d       	mov	r24, r10
     e20:	86 78       	andi	r24, 0x86	; 134
     e22:	09 f0       	breq	.+2      	; 0xe26 <vfprintf+0x300>
     e24:	b3 94       	inc	r11
     e26:	a3 fc       	sbrc	r10, 3
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <vfprintf+0x326>
     e2a:	a0 fe       	sbrs	r10, 0
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <vfprintf+0x314>
     e2e:	b2 14       	cp	r11, r2
     e30:	88 f4       	brcc	.+34     	; 0xe54 <vfprintf+0x32e>
     e32:	28 0c       	add	r2, r8
     e34:	92 2c       	mov	r9, r2
     e36:	9b 18       	sub	r9, r11
     e38:	0e c0       	rjmp	.+28     	; 0xe56 <vfprintf+0x330>
     e3a:	b2 14       	cp	r11, r2
     e3c:	60 f4       	brcc	.+24     	; 0xe56 <vfprintf+0x330>
     e3e:	b6 01       	movw	r22, r12
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     e48:	b3 94       	inc	r11
     e4a:	f7 cf       	rjmp	.-18     	; 0xe3a <vfprintf+0x314>
     e4c:	b2 14       	cp	r11, r2
     e4e:	18 f4       	brcc	.+6      	; 0xe56 <vfprintf+0x330>
     e50:	2b 18       	sub	r2, r11
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x332>
     e54:	98 2c       	mov	r9, r8
     e56:	21 2c       	mov	r2, r1
     e58:	a4 fe       	sbrs	r10, 4
     e5a:	10 c0       	rjmp	.+32     	; 0xe7c <vfprintf+0x356>
     e5c:	b6 01       	movw	r22, r12
     e5e:	80 e3       	ldi	r24, 0x30	; 48
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     e66:	a2 fe       	sbrs	r10, 2
     e68:	17 c0       	rjmp	.+46     	; 0xe98 <vfprintf+0x372>
     e6a:	a1 fc       	sbrc	r10, 1
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <vfprintf+0x34e>
     e6e:	88 e7       	ldi	r24, 0x78	; 120
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <vfprintf+0x352>
     e74:	88 e5       	ldi	r24, 0x58	; 88
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	b6 01       	movw	r22, r12
     e7a:	0c c0       	rjmp	.+24     	; 0xe94 <vfprintf+0x36e>
     e7c:	8a 2d       	mov	r24, r10
     e7e:	86 78       	andi	r24, 0x86	; 134
     e80:	59 f0       	breq	.+22     	; 0xe98 <vfprintf+0x372>
     e82:	a1 fe       	sbrs	r10, 1
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <vfprintf+0x364>
     e86:	8b e2       	ldi	r24, 0x2B	; 43
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <vfprintf+0x366>
     e8a:	80 e2       	ldi	r24, 0x20	; 32
     e8c:	a7 fc       	sbrc	r10, 7
     e8e:	8d e2       	ldi	r24, 0x2D	; 45
     e90:	b6 01       	movw	r22, r12
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     e98:	89 14       	cp	r8, r9
     e9a:	38 f4       	brcc	.+14     	; 0xeaa <vfprintf+0x384>
     e9c:	b6 01       	movw	r22, r12
     e9e:	80 e3       	ldi	r24, 0x30	; 48
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     ea6:	9a 94       	dec	r9
     ea8:	f7 cf       	rjmp	.-18     	; 0xe98 <vfprintf+0x372>
     eaa:	8a 94       	dec	r8
     eac:	f3 01       	movw	r30, r6
     eae:	e8 0d       	add	r30, r8
     eb0:	f1 1d       	adc	r31, r1
     eb2:	80 81       	ld	r24, Z
     eb4:	b6 01       	movw	r22, r12
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     ebc:	81 10       	cpse	r8, r1
     ebe:	f5 cf       	rjmp	.-22     	; 0xeaa <vfprintf+0x384>
     ec0:	22 20       	and	r2, r2
     ec2:	09 f4       	brne	.+2      	; 0xec6 <vfprintf+0x3a0>
     ec4:	42 ce       	rjmp	.-892    	; 0xb4a <vfprintf+0x24>
     ec6:	b6 01       	movw	r22, r12
     ec8:	80 e2       	ldi	r24, 0x20	; 32
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 bc 09 	call	0x1378	; 0x1378 <fputc>
     ed0:	2a 94       	dec	r2
     ed2:	f6 cf       	rjmp	.-20     	; 0xec0 <vfprintf+0x39a>
     ed4:	f6 01       	movw	r30, r12
     ed6:	86 81       	ldd	r24, Z+6	; 0x06
     ed8:	97 81       	ldd	r25, Z+7	; 0x07
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x3ba>
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	2b 96       	adiw	r28, 0x0b	; 11
     ee2:	e2 e1       	ldi	r30, 0x12	; 18
     ee4:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__epilogue_restores__>

00000ee8 <dtoa_prf>:
     ee8:	a9 e0       	ldi	r26, 0x09	; 9
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ea e7       	ldi	r30, 0x7A	; 122
     eee:	f7 e0       	ldi	r31, 0x07	; 7
     ef0:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__prologue_saves__+0xc>
     ef4:	6a 01       	movw	r12, r20
     ef6:	12 2f       	mov	r17, r18
     ef8:	b0 2e       	mov	r11, r16
     efa:	2b e3       	ldi	r18, 0x3B	; 59
     efc:	20 17       	cp	r18, r16
     efe:	20 f0       	brcs	.+8      	; 0xf08 <dtoa_prf+0x20>
     f00:	ff 24       	eor	r15, r15
     f02:	f3 94       	inc	r15
     f04:	f0 0e       	add	r15, r16
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <dtoa_prf+0x24>
     f08:	2c e3       	ldi	r18, 0x3C	; 60
     f0a:	f2 2e       	mov	r15, r18
     f0c:	0f 2d       	mov	r16, r15
     f0e:	27 e0       	ldi	r18, 0x07	; 7
     f10:	ae 01       	movw	r20, r28
     f12:	4f 5f       	subi	r20, 0xFF	; 255
     f14:	5f 4f       	sbci	r21, 0xFF	; 255
     f16:	0e 94 ce 08 	call	0x119c	; 0x119c <__ftoa_engine>
     f1a:	bc 01       	movw	r22, r24
     f1c:	49 81       	ldd	r20, Y+1	; 0x01
     f1e:	84 2f       	mov	r24, r20
     f20:	89 70       	andi	r24, 0x09	; 9
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	31 f0       	breq	.+12     	; 0xf32 <dtoa_prf+0x4a>
     f26:	e1 fc       	sbrc	r14, 1
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <dtoa_prf+0x4e>
     f2a:	e0 fe       	sbrs	r14, 0
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <dtoa_prf+0x52>
     f2e:	90 e2       	ldi	r25, 0x20	; 32
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <dtoa_prf+0x54>
     f32:	9d e2       	ldi	r25, 0x2D	; 45
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <dtoa_prf+0x54>
     f36:	9b e2       	ldi	r25, 0x2B	; 43
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <dtoa_prf+0x54>
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	5e 2d       	mov	r21, r14
     f3e:	50 71       	andi	r21, 0x10	; 16
     f40:	43 ff       	sbrs	r20, 3
     f42:	3c c0       	rjmp	.+120    	; 0xfbc <dtoa_prf+0xd4>
     f44:	91 11       	cpse	r25, r1
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <dtoa_prf+0x64>
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <dtoa_prf+0x66>
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	81 17       	cp	r24, r17
     f50:	18 f4       	brcc	.+6      	; 0xf58 <dtoa_prf+0x70>
     f52:	21 2f       	mov	r18, r17
     f54:	28 1b       	sub	r18, r24
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <dtoa_prf+0x72>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	51 11       	cpse	r21, r1
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <dtoa_prf+0x8c>
     f5e:	f6 01       	movw	r30, r12
     f60:	82 2f       	mov	r24, r18
     f62:	30 e2       	ldi	r19, 0x20	; 32
     f64:	88 23       	and	r24, r24
     f66:	19 f0       	breq	.+6      	; 0xf6e <dtoa_prf+0x86>
     f68:	31 93       	st	Z+, r19
     f6a:	81 50       	subi	r24, 0x01	; 1
     f6c:	fb cf       	rjmp	.-10     	; 0xf64 <dtoa_prf+0x7c>
     f6e:	c2 0e       	add	r12, r18
     f70:	d1 1c       	adc	r13, r1
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	99 23       	and	r25, r25
     f76:	29 f0       	breq	.+10     	; 0xf82 <dtoa_prf+0x9a>
     f78:	d6 01       	movw	r26, r12
     f7a:	9c 93       	st	X, r25
     f7c:	f6 01       	movw	r30, r12
     f7e:	31 96       	adiw	r30, 0x01	; 1
     f80:	6f 01       	movw	r12, r30
     f82:	c6 01       	movw	r24, r12
     f84:	03 96       	adiw	r24, 0x03	; 3
     f86:	e2 fe       	sbrs	r14, 2
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <dtoa_prf+0xb6>
     f8a:	3e e4       	ldi	r19, 0x4E	; 78
     f8c:	d6 01       	movw	r26, r12
     f8e:	3c 93       	st	X, r19
     f90:	41 e4       	ldi	r20, 0x41	; 65
     f92:	11 96       	adiw	r26, 0x01	; 1
     f94:	4c 93       	st	X, r20
     f96:	11 97       	sbiw	r26, 0x01	; 1
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	3c 93       	st	X, r19
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <dtoa_prf+0xc2>
     f9e:	3e e6       	ldi	r19, 0x6E	; 110
     fa0:	f6 01       	movw	r30, r12
     fa2:	30 83       	st	Z, r19
     fa4:	41 e6       	ldi	r20, 0x61	; 97
     fa6:	41 83       	std	Z+1, r20	; 0x01
     fa8:	32 83       	std	Z+2, r19	; 0x02
     faa:	fc 01       	movw	r30, r24
     fac:	32 2f       	mov	r19, r18
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	33 23       	and	r19, r19
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <dtoa_prf+0xce>
     fb4:	42 c0       	rjmp	.+132    	; 0x103a <dtoa_prf+0x152>
     fb6:	41 93       	st	Z+, r20
     fb8:	31 50       	subi	r19, 0x01	; 1
     fba:	fa cf       	rjmp	.-12     	; 0xfb0 <dtoa_prf+0xc8>
     fbc:	42 ff       	sbrs	r20, 2
     fbe:	44 c0       	rjmp	.+136    	; 0x1048 <dtoa_prf+0x160>
     fc0:	91 11       	cpse	r25, r1
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <dtoa_prf+0xe0>
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <dtoa_prf+0xe2>
     fc8:	84 e0       	ldi	r24, 0x04	; 4
     fca:	81 17       	cp	r24, r17
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <dtoa_prf+0xec>
     fce:	21 2f       	mov	r18, r17
     fd0:	28 1b       	sub	r18, r24
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <dtoa_prf+0xee>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	51 11       	cpse	r21, r1
     fd8:	0b c0       	rjmp	.+22     	; 0xff0 <dtoa_prf+0x108>
     fda:	f6 01       	movw	r30, r12
     fdc:	82 2f       	mov	r24, r18
     fde:	30 e2       	ldi	r19, 0x20	; 32
     fe0:	88 23       	and	r24, r24
     fe2:	19 f0       	breq	.+6      	; 0xfea <dtoa_prf+0x102>
     fe4:	31 93       	st	Z+, r19
     fe6:	81 50       	subi	r24, 0x01	; 1
     fe8:	fb cf       	rjmp	.-10     	; 0xfe0 <dtoa_prf+0xf8>
     fea:	c2 0e       	add	r12, r18
     fec:	d1 1c       	adc	r13, r1
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	99 23       	and	r25, r25
     ff2:	29 f0       	breq	.+10     	; 0xffe <dtoa_prf+0x116>
     ff4:	d6 01       	movw	r26, r12
     ff6:	9c 93       	st	X, r25
     ff8:	f6 01       	movw	r30, r12
     ffa:	31 96       	adiw	r30, 0x01	; 1
     ffc:	6f 01       	movw	r12, r30
     ffe:	c6 01       	movw	r24, r12
    1000:	03 96       	adiw	r24, 0x03	; 3
    1002:	e2 fe       	sbrs	r14, 2
    1004:	0b c0       	rjmp	.+22     	; 0x101c <dtoa_prf+0x134>
    1006:	39 e4       	ldi	r19, 0x49	; 73
    1008:	d6 01       	movw	r26, r12
    100a:	3c 93       	st	X, r19
    100c:	3e e4       	ldi	r19, 0x4E	; 78
    100e:	11 96       	adiw	r26, 0x01	; 1
    1010:	3c 93       	st	X, r19
    1012:	11 97       	sbiw	r26, 0x01	; 1
    1014:	36 e4       	ldi	r19, 0x46	; 70
    1016:	12 96       	adiw	r26, 0x02	; 2
    1018:	3c 93       	st	X, r19
    101a:	07 c0       	rjmp	.+14     	; 0x102a <dtoa_prf+0x142>
    101c:	39 e6       	ldi	r19, 0x69	; 105
    101e:	f6 01       	movw	r30, r12
    1020:	30 83       	st	Z, r19
    1022:	3e e6       	ldi	r19, 0x6E	; 110
    1024:	31 83       	std	Z+1, r19	; 0x01
    1026:	36 e6       	ldi	r19, 0x66	; 102
    1028:	32 83       	std	Z+2, r19	; 0x02
    102a:	fc 01       	movw	r30, r24
    102c:	32 2f       	mov	r19, r18
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	33 23       	and	r19, r19
    1032:	19 f0       	breq	.+6      	; 0x103a <dtoa_prf+0x152>
    1034:	41 93       	st	Z+, r20
    1036:	31 50       	subi	r19, 0x01	; 1
    1038:	fb cf       	rjmp	.-10     	; 0x1030 <dtoa_prf+0x148>
    103a:	fc 01       	movw	r30, r24
    103c:	e2 0f       	add	r30, r18
    103e:	f1 1d       	adc	r31, r1
    1040:	10 82       	st	Z, r1
    1042:	8e ef       	ldi	r24, 0xFE	; 254
    1044:	9f ef       	ldi	r25, 0xFF	; 255
    1046:	a6 c0       	rjmp	.+332    	; 0x1194 <dtoa_prf+0x2ac>
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	91 11       	cpse	r25, r1
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <dtoa_prf+0x16c>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	16 16       	cp	r1, r22
    1056:	17 06       	cpc	r1, r23
    1058:	1c f4       	brge	.+6      	; 0x1060 <dtoa_prf+0x178>
    105a:	fb 01       	movw	r30, r22
    105c:	31 96       	adiw	r30, 0x01	; 1
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <dtoa_prf+0x17c>
    1060:	e1 e0       	ldi	r30, 0x01	; 1
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	2e 0f       	add	r18, r30
    1066:	3f 1f       	adc	r19, r31
    1068:	bb 20       	and	r11, r11
    106a:	21 f0       	breq	.+8      	; 0x1074 <dtoa_prf+0x18c>
    106c:	eb 2d       	mov	r30, r11
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	31 96       	adiw	r30, 0x01	; 1
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <dtoa_prf+0x190>
    1074:	e0 e0       	ldi	r30, 0x00	; 0
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	2e 0f       	add	r18, r30
    107a:	3f 1f       	adc	r19, r31
    107c:	e1 2f       	mov	r30, r17
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	2e 17       	cp	r18, r30
    1082:	3f 07       	cpc	r19, r31
    1084:	1c f4       	brge	.+6      	; 0x108c <dtoa_prf+0x1a4>
    1086:	12 1b       	sub	r17, r18
    1088:	21 2f       	mov	r18, r17
    108a:	01 c0       	rjmp	.+2      	; 0x108e <dtoa_prf+0x1a6>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	8e 2d       	mov	r24, r14
    1090:	88 71       	andi	r24, 0x18	; 24
    1092:	59 f4       	brne	.+22     	; 0x10aa <dtoa_prf+0x1c2>
    1094:	f6 01       	movw	r30, r12
    1096:	82 2f       	mov	r24, r18
    1098:	30 e2       	ldi	r19, 0x20	; 32
    109a:	88 23       	and	r24, r24
    109c:	19 f0       	breq	.+6      	; 0x10a4 <dtoa_prf+0x1bc>
    109e:	31 93       	st	Z+, r19
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	fb cf       	rjmp	.-10     	; 0x109a <dtoa_prf+0x1b2>
    10a4:	c2 0e       	add	r12, r18
    10a6:	d1 1c       	adc	r13, r1
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	99 23       	and	r25, r25
    10ac:	29 f0       	breq	.+10     	; 0x10b8 <dtoa_prf+0x1d0>
    10ae:	d6 01       	movw	r26, r12
    10b0:	9c 93       	st	X, r25
    10b2:	f6 01       	movw	r30, r12
    10b4:	31 96       	adiw	r30, 0x01	; 1
    10b6:	6f 01       	movw	r12, r30
    10b8:	51 11       	cpse	r21, r1
    10ba:	0b c0       	rjmp	.+22     	; 0x10d2 <dtoa_prf+0x1ea>
    10bc:	f6 01       	movw	r30, r12
    10be:	82 2f       	mov	r24, r18
    10c0:	90 e3       	ldi	r25, 0x30	; 48
    10c2:	88 23       	and	r24, r24
    10c4:	19 f0       	breq	.+6      	; 0x10cc <dtoa_prf+0x1e4>
    10c6:	91 93       	st	Z+, r25
    10c8:	81 50       	subi	r24, 0x01	; 1
    10ca:	fb cf       	rjmp	.-10     	; 0x10c2 <dtoa_prf+0x1da>
    10cc:	c2 0e       	add	r12, r18
    10ce:	d1 1c       	adc	r13, r1
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	0f 2d       	mov	r16, r15
    10d4:	06 0f       	add	r16, r22
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	34 2f       	mov	r19, r20
    10da:	30 71       	andi	r19, 0x10	; 16
    10dc:	44 ff       	sbrs	r20, 4
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <dtoa_prf+0x1fe>
    10e0:	91 33       	cpi	r25, 0x31	; 49
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <dtoa_prf+0x1fe>
    10e4:	01 50       	subi	r16, 0x01	; 1
    10e6:	10 16       	cp	r1, r16
    10e8:	24 f4       	brge	.+8      	; 0x10f2 <dtoa_prf+0x20a>
    10ea:	09 30       	cpi	r16, 0x09	; 9
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <dtoa_prf+0x20c>
    10ee:	08 e0       	ldi	r16, 0x08	; 8
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <dtoa_prf+0x20c>
    10f2:	01 e0       	ldi	r16, 0x01	; 1
    10f4:	ab 01       	movw	r20, r22
    10f6:	77 ff       	sbrs	r23, 7
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <dtoa_prf+0x216>
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	fb 01       	movw	r30, r22
    1100:	e4 1b       	sub	r30, r20
    1102:	f5 0b       	sbc	r31, r21
    1104:	a1 e0       	ldi	r26, 0x01	; 1
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ac 0f       	add	r26, r28
    110a:	bd 1f       	adc	r27, r29
    110c:	ea 0f       	add	r30, r26
    110e:	fb 1f       	adc	r31, r27
    1110:	8e e2       	ldi	r24, 0x2E	; 46
    1112:	a8 2e       	mov	r10, r24
    1114:	4b 01       	movw	r8, r22
    1116:	80 1a       	sub	r8, r16
    1118:	91 08       	sbc	r9, r1
    111a:	0b 2d       	mov	r16, r11
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	11 95       	neg	r17
    1120:	01 95       	neg	r16
    1122:	11 09       	sbc	r17, r1
    1124:	4f 3f       	cpi	r20, 0xFF	; 255
    1126:	bf ef       	ldi	r27, 0xFF	; 255
    1128:	5b 07       	cpc	r21, r27
    112a:	21 f4       	brne	.+8      	; 0x1134 <dtoa_prf+0x24c>
    112c:	d6 01       	movw	r26, r12
    112e:	ac 92       	st	X, r10
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	6d 01       	movw	r12, r26
    1134:	64 17       	cp	r22, r20
    1136:	75 07       	cpc	r23, r21
    1138:	2c f0       	brlt	.+10     	; 0x1144 <dtoa_prf+0x25c>
    113a:	84 16       	cp	r8, r20
    113c:	95 06       	cpc	r9, r21
    113e:	14 f4       	brge	.+4      	; 0x1144 <dtoa_prf+0x25c>
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <dtoa_prf+0x25e>
    1144:	80 e3       	ldi	r24, 0x30	; 48
    1146:	41 50       	subi	r20, 0x01	; 1
    1148:	51 09       	sbc	r21, r1
    114a:	31 96       	adiw	r30, 0x01	; 1
    114c:	d6 01       	movw	r26, r12
    114e:	11 96       	adiw	r26, 0x01	; 1
    1150:	7d 01       	movw	r14, r26
    1152:	40 17       	cp	r20, r16
    1154:	51 07       	cpc	r21, r17
    1156:	24 f0       	brlt	.+8      	; 0x1160 <dtoa_prf+0x278>
    1158:	d6 01       	movw	r26, r12
    115a:	8c 93       	st	X, r24
    115c:	67 01       	movw	r12, r14
    115e:	e2 cf       	rjmp	.-60     	; 0x1124 <dtoa_prf+0x23c>
    1160:	64 17       	cp	r22, r20
    1162:	75 07       	cpc	r23, r21
    1164:	39 f4       	brne	.+14     	; 0x1174 <dtoa_prf+0x28c>
    1166:	96 33       	cpi	r25, 0x36	; 54
    1168:	20 f4       	brcc	.+8      	; 0x1172 <dtoa_prf+0x28a>
    116a:	95 33       	cpi	r25, 0x35	; 53
    116c:	19 f4       	brne	.+6      	; 0x1174 <dtoa_prf+0x28c>
    116e:	31 11       	cpse	r19, r1
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <dtoa_prf+0x28c>
    1172:	81 e3       	ldi	r24, 0x31	; 49
    1174:	f6 01       	movw	r30, r12
    1176:	80 83       	st	Z, r24
    1178:	f7 01       	movw	r30, r14
    117a:	82 2f       	mov	r24, r18
    117c:	90 e2       	ldi	r25, 0x20	; 32
    117e:	88 23       	and	r24, r24
    1180:	19 f0       	breq	.+6      	; 0x1188 <dtoa_prf+0x2a0>
    1182:	91 93       	st	Z+, r25
    1184:	81 50       	subi	r24, 0x01	; 1
    1186:	fb cf       	rjmp	.-10     	; 0x117e <dtoa_prf+0x296>
    1188:	f7 01       	movw	r30, r14
    118a:	e2 0f       	add	r30, r18
    118c:	f1 1d       	adc	r31, r1
    118e:	10 82       	st	Z, r1
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	29 96       	adiw	r28, 0x09	; 9
    1196:	ec e0       	ldi	r30, 0x0C	; 12
    1198:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__epilogue_restores__+0xc>

0000119c <__ftoa_engine>:
    119c:	28 30       	cpi	r18, 0x08	; 8
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <__ftoa_engine+0x6>
    11a0:	27 e0       	ldi	r18, 0x07	; 7
    11a2:	33 27       	eor	r19, r19
    11a4:	da 01       	movw	r26, r20
    11a6:	99 0f       	add	r25, r25
    11a8:	31 1d       	adc	r19, r1
    11aa:	87 fd       	sbrc	r24, 7
    11ac:	91 60       	ori	r25, 0x01	; 1
    11ae:	00 96       	adiw	r24, 0x00	; 0
    11b0:	61 05       	cpc	r22, r1
    11b2:	71 05       	cpc	r23, r1
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <__ftoa_engine+0x28>
    11b6:	32 60       	ori	r19, 0x02	; 2
    11b8:	2e 5f       	subi	r18, 0xFE	; 254
    11ba:	3d 93       	st	X+, r19
    11bc:	30 e3       	ldi	r19, 0x30	; 48
    11be:	2a 95       	dec	r18
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <__ftoa_engine+0x1e>
    11c2:	08 95       	ret
    11c4:	9f 3f       	cpi	r25, 0xFF	; 255
    11c6:	30 f0       	brcs	.+12     	; 0x11d4 <__ftoa_engine+0x38>
    11c8:	80 38       	cpi	r24, 0x80	; 128
    11ca:	71 05       	cpc	r23, r1
    11cc:	61 05       	cpc	r22, r1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__ftoa_engine+0x36>
    11d0:	3c 5f       	subi	r19, 0xFC	; 252
    11d2:	3c 5f       	subi	r19, 0xFC	; 252
    11d4:	3d 93       	st	X+, r19
    11d6:	91 30       	cpi	r25, 0x01	; 1
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <__ftoa_engine+0x40>
    11da:	80 68       	ori	r24, 0x80	; 128
    11dc:	91 1d       	adc	r25, r1
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	1f 93       	push	r17
    11e4:	0f 93       	push	r16
    11e6:	ff 92       	push	r15
    11e8:	ef 92       	push	r14
    11ea:	19 2f       	mov	r17, r25
    11ec:	98 7f       	andi	r25, 0xF8	; 248
    11ee:	96 95       	lsr	r25
    11f0:	e9 2f       	mov	r30, r25
    11f2:	96 95       	lsr	r25
    11f4:	96 95       	lsr	r25
    11f6:	e9 0f       	add	r30, r25
    11f8:	ff 27       	eor	r31, r31
    11fa:	ee 53       	subi	r30, 0x3E	; 62
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	99 27       	eor	r25, r25
    1200:	33 27       	eor	r19, r19
    1202:	ee 24       	eor	r14, r14
    1204:	ff 24       	eor	r15, r15
    1206:	a7 01       	movw	r20, r14
    1208:	e7 01       	movw	r28, r14
    120a:	05 90       	lpm	r0, Z+
    120c:	08 94       	sec
    120e:	07 94       	ror	r0
    1210:	28 f4       	brcc	.+10     	; 0x121c <__ftoa_engine+0x80>
    1212:	36 0f       	add	r19, r22
    1214:	e7 1e       	adc	r14, r23
    1216:	f8 1e       	adc	r15, r24
    1218:	49 1f       	adc	r20, r25
    121a:	51 1d       	adc	r21, r1
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	06 94       	lsr	r0
    1226:	a1 f7       	brne	.-24     	; 0x1210 <__ftoa_engine+0x74>
    1228:	05 90       	lpm	r0, Z+
    122a:	07 94       	ror	r0
    122c:	28 f4       	brcc	.+10     	; 0x1238 <__ftoa_engine+0x9c>
    122e:	e7 0e       	add	r14, r23
    1230:	f8 1e       	adc	r15, r24
    1232:	49 1f       	adc	r20, r25
    1234:	56 1f       	adc	r21, r22
    1236:	c1 1d       	adc	r28, r1
    1238:	77 0f       	add	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	66 1f       	adc	r22, r22
    1240:	06 94       	lsr	r0
    1242:	a1 f7       	brne	.-24     	; 0x122c <__ftoa_engine+0x90>
    1244:	05 90       	lpm	r0, Z+
    1246:	07 94       	ror	r0
    1248:	28 f4       	brcc	.+10     	; 0x1254 <__ftoa_engine+0xb8>
    124a:	f8 0e       	add	r15, r24
    124c:	49 1f       	adc	r20, r25
    124e:	56 1f       	adc	r21, r22
    1250:	c7 1f       	adc	r28, r23
    1252:	d1 1d       	adc	r29, r1
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	66 1f       	adc	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	06 94       	lsr	r0
    125e:	a1 f7       	brne	.-24     	; 0x1248 <__ftoa_engine+0xac>
    1260:	05 90       	lpm	r0, Z+
    1262:	07 94       	ror	r0
    1264:	20 f4       	brcc	.+8      	; 0x126e <__ftoa_engine+0xd2>
    1266:	49 0f       	add	r20, r25
    1268:	56 1f       	adc	r21, r22
    126a:	c7 1f       	adc	r28, r23
    126c:	d8 1f       	adc	r29, r24
    126e:	99 0f       	add	r25, r25
    1270:	66 1f       	adc	r22, r22
    1272:	77 1f       	adc	r23, r23
    1274:	88 1f       	adc	r24, r24
    1276:	06 94       	lsr	r0
    1278:	a9 f7       	brne	.-22     	; 0x1264 <__ftoa_engine+0xc8>
    127a:	84 91       	lpm	r24, Z
    127c:	10 95       	com	r17
    127e:	17 70       	andi	r17, 0x07	; 7
    1280:	41 f0       	breq	.+16     	; 0x1292 <__ftoa_engine+0xf6>
    1282:	d6 95       	lsr	r29
    1284:	c7 95       	ror	r28
    1286:	57 95       	ror	r21
    1288:	47 95       	ror	r20
    128a:	f7 94       	ror	r15
    128c:	e7 94       	ror	r14
    128e:	1a 95       	dec	r17
    1290:	c1 f7       	brne	.-16     	; 0x1282 <__ftoa_engine+0xe6>
    1292:	e8 e6       	ldi	r30, 0x68	; 104
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	68 94       	set
    1298:	15 90       	lpm	r1, Z+
    129a:	15 91       	lpm	r17, Z+
    129c:	35 91       	lpm	r19, Z+
    129e:	65 91       	lpm	r22, Z+
    12a0:	95 91       	lpm	r25, Z+
    12a2:	05 90       	lpm	r0, Z+
    12a4:	7f e2       	ldi	r23, 0x2F	; 47
    12a6:	73 95       	inc	r23
    12a8:	e1 18       	sub	r14, r1
    12aa:	f1 0a       	sbc	r15, r17
    12ac:	43 0b       	sbc	r20, r19
    12ae:	56 0b       	sbc	r21, r22
    12b0:	c9 0b       	sbc	r28, r25
    12b2:	d0 09       	sbc	r29, r0
    12b4:	c0 f7       	brcc	.-16     	; 0x12a6 <__ftoa_engine+0x10a>
    12b6:	e1 0c       	add	r14, r1
    12b8:	f1 1e       	adc	r15, r17
    12ba:	43 1f       	adc	r20, r19
    12bc:	56 1f       	adc	r21, r22
    12be:	c9 1f       	adc	r28, r25
    12c0:	d0 1d       	adc	r29, r0
    12c2:	7e f4       	brtc	.+30     	; 0x12e2 <__ftoa_engine+0x146>
    12c4:	70 33       	cpi	r23, 0x30	; 48
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__ftoa_engine+0x130>
    12c8:	8a 95       	dec	r24
    12ca:	e6 cf       	rjmp	.-52     	; 0x1298 <__ftoa_engine+0xfc>
    12cc:	e8 94       	clt
    12ce:	01 50       	subi	r16, 0x01	; 1
    12d0:	30 f0       	brcs	.+12     	; 0x12de <__ftoa_engine+0x142>
    12d2:	08 0f       	add	r16, r24
    12d4:	0a f4       	brpl	.+2      	; 0x12d8 <__ftoa_engine+0x13c>
    12d6:	00 27       	eor	r16, r16
    12d8:	02 17       	cp	r16, r18
    12da:	08 f4       	brcc	.+2      	; 0x12de <__ftoa_engine+0x142>
    12dc:	20 2f       	mov	r18, r16
    12de:	23 95       	inc	r18
    12e0:	02 2f       	mov	r16, r18
    12e2:	7a 33       	cpi	r23, 0x3A	; 58
    12e4:	28 f0       	brcs	.+10     	; 0x12f0 <__ftoa_engine+0x154>
    12e6:	79 e3       	ldi	r23, 0x39	; 57
    12e8:	7d 93       	st	X+, r23
    12ea:	2a 95       	dec	r18
    12ec:	e9 f7       	brne	.-6      	; 0x12e8 <__ftoa_engine+0x14c>
    12ee:	10 c0       	rjmp	.+32     	; 0x1310 <__ftoa_engine+0x174>
    12f0:	7d 93       	st	X+, r23
    12f2:	2a 95       	dec	r18
    12f4:	89 f6       	brne	.-94     	; 0x1298 <__ftoa_engine+0xfc>
    12f6:	06 94       	lsr	r0
    12f8:	97 95       	ror	r25
    12fa:	67 95       	ror	r22
    12fc:	37 95       	ror	r19
    12fe:	17 95       	ror	r17
    1300:	17 94       	ror	r1
    1302:	e1 18       	sub	r14, r1
    1304:	f1 0a       	sbc	r15, r17
    1306:	43 0b       	sbc	r20, r19
    1308:	56 0b       	sbc	r21, r22
    130a:	c9 0b       	sbc	r28, r25
    130c:	d0 09       	sbc	r29, r0
    130e:	98 f0       	brcs	.+38     	; 0x1336 <__ftoa_engine+0x19a>
    1310:	23 95       	inc	r18
    1312:	7e 91       	ld	r23, -X
    1314:	73 95       	inc	r23
    1316:	7a 33       	cpi	r23, 0x3A	; 58
    1318:	08 f0       	brcs	.+2      	; 0x131c <__ftoa_engine+0x180>
    131a:	70 e3       	ldi	r23, 0x30	; 48
    131c:	7c 93       	st	X, r23
    131e:	20 13       	cpse	r18, r16
    1320:	b8 f7       	brcc	.-18     	; 0x1310 <__ftoa_engine+0x174>
    1322:	7e 91       	ld	r23, -X
    1324:	70 61       	ori	r23, 0x10	; 16
    1326:	7d 93       	st	X+, r23
    1328:	30 f0       	brcs	.+12     	; 0x1336 <__ftoa_engine+0x19a>
    132a:	83 95       	inc	r24
    132c:	71 e3       	ldi	r23, 0x31	; 49
    132e:	7d 93       	st	X+, r23
    1330:	70 e3       	ldi	r23, 0x30	; 48
    1332:	2a 95       	dec	r18
    1334:	e1 f7       	brne	.-8      	; 0x132e <__ftoa_engine+0x192>
    1336:	11 24       	eor	r1, r1
    1338:	ef 90       	pop	r14
    133a:	ff 90       	pop	r15
    133c:	0f 91       	pop	r16
    133e:	1f 91       	pop	r17
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	99 27       	eor	r25, r25
    1346:	87 fd       	sbrc	r24, 7
    1348:	90 95       	com	r25
    134a:	08 95       	ret

0000134c <strnlen_P>:
    134c:	fc 01       	movw	r30, r24
    134e:	05 90       	lpm	r0, Z+
    1350:	61 50       	subi	r22, 0x01	; 1
    1352:	70 40       	sbci	r23, 0x00	; 0
    1354:	01 10       	cpse	r0, r1
    1356:	d8 f7       	brcc	.-10     	; 0x134e <strnlen_P+0x2>
    1358:	80 95       	com	r24
    135a:	90 95       	com	r25
    135c:	8e 0f       	add	r24, r30
    135e:	9f 1f       	adc	r25, r31
    1360:	08 95       	ret

00001362 <strnlen>:
    1362:	fc 01       	movw	r30, r24
    1364:	61 50       	subi	r22, 0x01	; 1
    1366:	70 40       	sbci	r23, 0x00	; 0
    1368:	01 90       	ld	r0, Z+
    136a:	01 10       	cpse	r0, r1
    136c:	d8 f7       	brcc	.-10     	; 0x1364 <strnlen+0x2>
    136e:	80 95       	com	r24
    1370:	90 95       	com	r25
    1372:	8e 0f       	add	r24, r30
    1374:	9f 1f       	adc	r25, r31
    1376:	08 95       	ret

00001378 <fputc>:
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	fb 01       	movw	r30, r22
    1382:	23 81       	ldd	r18, Z+3	; 0x03
    1384:	21 fd       	sbrc	r18, 1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <fputc+0x16>
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	9f ef       	ldi	r25, 0xFF	; 255
    138c:	2c c0       	rjmp	.+88     	; 0x13e6 <fputc+0x6e>
    138e:	22 ff       	sbrs	r18, 2
    1390:	16 c0       	rjmp	.+44     	; 0x13be <fputc+0x46>
    1392:	46 81       	ldd	r20, Z+6	; 0x06
    1394:	57 81       	ldd	r21, Z+7	; 0x07
    1396:	24 81       	ldd	r18, Z+4	; 0x04
    1398:	35 81       	ldd	r19, Z+5	; 0x05
    139a:	42 17       	cp	r20, r18
    139c:	53 07       	cpc	r21, r19
    139e:	44 f4       	brge	.+16     	; 0x13b0 <fputc+0x38>
    13a0:	a0 81       	ld	r26, Z
    13a2:	b1 81       	ldd	r27, Z+1	; 0x01
    13a4:	9d 01       	movw	r18, r26
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	31 83       	std	Z+1, r19	; 0x01
    13ac:	20 83       	st	Z, r18
    13ae:	8c 93       	st	X, r24
    13b0:	26 81       	ldd	r18, Z+6	; 0x06
    13b2:	37 81       	ldd	r19, Z+7	; 0x07
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	37 83       	std	Z+7, r19	; 0x07
    13ba:	26 83       	std	Z+6, r18	; 0x06
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <fputc+0x6e>
    13be:	8b 01       	movw	r16, r22
    13c0:	ec 01       	movw	r28, r24
    13c2:	fb 01       	movw	r30, r22
    13c4:	00 84       	ldd	r0, Z+8	; 0x08
    13c6:	f1 85       	ldd	r31, Z+9	; 0x09
    13c8:	e0 2d       	mov	r30, r0
    13ca:	09 95       	icall
    13cc:	89 2b       	or	r24, r25
    13ce:	e1 f6       	brne	.-72     	; 0x1388 <fputc+0x10>
    13d0:	d8 01       	movw	r26, r16
    13d2:	16 96       	adiw	r26, 0x06	; 6
    13d4:	8d 91       	ld	r24, X+
    13d6:	9c 91       	ld	r25, X
    13d8:	17 97       	sbiw	r26, 0x07	; 7
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	17 96       	adiw	r26, 0x07	; 7
    13de:	9c 93       	st	X, r25
    13e0:	8e 93       	st	-X, r24
    13e2:	16 97       	sbiw	r26, 0x06	; 6
    13e4:	ce 01       	movw	r24, r28
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <__ultoa_invert>:
    13f0:	fa 01       	movw	r30, r20
    13f2:	aa 27       	eor	r26, r26
    13f4:	28 30       	cpi	r18, 0x08	; 8
    13f6:	51 f1       	breq	.+84     	; 0x144c <__ultoa_invert+0x5c>
    13f8:	20 31       	cpi	r18, 0x10	; 16
    13fa:	81 f1       	breq	.+96     	; 0x145c <__ultoa_invert+0x6c>
    13fc:	e8 94       	clt
    13fe:	6f 93       	push	r22
    1400:	6e 7f       	andi	r22, 0xFE	; 254
    1402:	6e 5f       	subi	r22, 0xFE	; 254
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	af 4f       	sbci	r26, 0xFF	; 255
    140c:	b1 e0       	ldi	r27, 0x01	; 1
    140e:	3e d0       	rcall	.+124    	; 0x148c <__ultoa_invert+0x9c>
    1410:	b4 e0       	ldi	r27, 0x04	; 4
    1412:	3c d0       	rcall	.+120    	; 0x148c <__ultoa_invert+0x9c>
    1414:	67 0f       	add	r22, r23
    1416:	78 1f       	adc	r23, r24
    1418:	89 1f       	adc	r24, r25
    141a:	9a 1f       	adc	r25, r26
    141c:	a1 1d       	adc	r26, r1
    141e:	68 0f       	add	r22, r24
    1420:	79 1f       	adc	r23, r25
    1422:	8a 1f       	adc	r24, r26
    1424:	91 1d       	adc	r25, r1
    1426:	a1 1d       	adc	r26, r1
    1428:	6a 0f       	add	r22, r26
    142a:	71 1d       	adc	r23, r1
    142c:	81 1d       	adc	r24, r1
    142e:	91 1d       	adc	r25, r1
    1430:	a1 1d       	adc	r26, r1
    1432:	20 d0       	rcall	.+64     	; 0x1474 <__ultoa_invert+0x84>
    1434:	09 f4       	brne	.+2      	; 0x1438 <__ultoa_invert+0x48>
    1436:	68 94       	set
    1438:	3f 91       	pop	r19
    143a:	2a e0       	ldi	r18, 0x0A	; 10
    143c:	26 9f       	mul	r18, r22
    143e:	11 24       	eor	r1, r1
    1440:	30 19       	sub	r19, r0
    1442:	30 5d       	subi	r19, 0xD0	; 208
    1444:	31 93       	st	Z+, r19
    1446:	de f6       	brtc	.-74     	; 0x13fe <__ultoa_invert+0xe>
    1448:	cf 01       	movw	r24, r30
    144a:	08 95       	ret
    144c:	46 2f       	mov	r20, r22
    144e:	47 70       	andi	r20, 0x07	; 7
    1450:	40 5d       	subi	r20, 0xD0	; 208
    1452:	41 93       	st	Z+, r20
    1454:	b3 e0       	ldi	r27, 0x03	; 3
    1456:	0f d0       	rcall	.+30     	; 0x1476 <__ultoa_invert+0x86>
    1458:	c9 f7       	brne	.-14     	; 0x144c <__ultoa_invert+0x5c>
    145a:	f6 cf       	rjmp	.-20     	; 0x1448 <__ultoa_invert+0x58>
    145c:	46 2f       	mov	r20, r22
    145e:	4f 70       	andi	r20, 0x0F	; 15
    1460:	40 5d       	subi	r20, 0xD0	; 208
    1462:	4a 33       	cpi	r20, 0x3A	; 58
    1464:	18 f0       	brcs	.+6      	; 0x146c <__ultoa_invert+0x7c>
    1466:	49 5d       	subi	r20, 0xD9	; 217
    1468:	31 fd       	sbrc	r19, 1
    146a:	40 52       	subi	r20, 0x20	; 32
    146c:	41 93       	st	Z+, r20
    146e:	02 d0       	rcall	.+4      	; 0x1474 <__ultoa_invert+0x84>
    1470:	a9 f7       	brne	.-22     	; 0x145c <__ultoa_invert+0x6c>
    1472:	ea cf       	rjmp	.-44     	; 0x1448 <__ultoa_invert+0x58>
    1474:	b4 e0       	ldi	r27, 0x04	; 4
    1476:	a6 95       	lsr	r26
    1478:	97 95       	ror	r25
    147a:	87 95       	ror	r24
    147c:	77 95       	ror	r23
    147e:	67 95       	ror	r22
    1480:	ba 95       	dec	r27
    1482:	c9 f7       	brne	.-14     	; 0x1476 <__ultoa_invert+0x86>
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	61 05       	cpc	r22, r1
    1488:	71 05       	cpc	r23, r1
    148a:	08 95       	ret
    148c:	9b 01       	movw	r18, r22
    148e:	ac 01       	movw	r20, r24
    1490:	0a 2e       	mov	r0, r26
    1492:	06 94       	lsr	r0
    1494:	57 95       	ror	r21
    1496:	47 95       	ror	r20
    1498:	37 95       	ror	r19
    149a:	27 95       	ror	r18
    149c:	ba 95       	dec	r27
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__ultoa_invert+0xa2>
    14a0:	62 0f       	add	r22, r18
    14a2:	73 1f       	adc	r23, r19
    14a4:	84 1f       	adc	r24, r20
    14a6:	95 1f       	adc	r25, r21
    14a8:	a0 1d       	adc	r26, r0
    14aa:	08 95       	ret

000014ac <__prologue_saves__>:
    14ac:	2f 92       	push	r2
    14ae:	3f 92       	push	r3
    14b0:	4f 92       	push	r4
    14b2:	5f 92       	push	r5
    14b4:	6f 92       	push	r6
    14b6:	7f 92       	push	r7
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	ca 1b       	sub	r28, r26
    14d6:	db 0b       	sbc	r29, r27
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	09 94       	ijmp

000014e4 <__epilogue_restores__>:
    14e4:	2a 88       	ldd	r2, Y+18	; 0x12
    14e6:	39 88       	ldd	r3, Y+17	; 0x11
    14e8:	48 88       	ldd	r4, Y+16	; 0x10
    14ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    14ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    14f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    14f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    14f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    14f6:	b9 84       	ldd	r11, Y+9	; 0x09
    14f8:	c8 84       	ldd	r12, Y+8	; 0x08
    14fa:	df 80       	ldd	r13, Y+7	; 0x07
    14fc:	ee 80       	ldd	r14, Y+6	; 0x06
    14fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1500:	0c 81       	ldd	r16, Y+4	; 0x04
    1502:	1b 81       	ldd	r17, Y+3	; 0x03
    1504:	aa 81       	ldd	r26, Y+2	; 0x02
    1506:	b9 81       	ldd	r27, Y+1	; 0x01
    1508:	ce 0f       	add	r28, r30
    150a:	d1 1d       	adc	r29, r1
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	ed 01       	movw	r28, r26
    1518:	08 95       	ret

0000151a <_exit>:
    151a:	f8 94       	cli

0000151c <__stop_program>:
    151c:	ff cf       	rjmp	.-2      	; 0x151c <__stop_program>
