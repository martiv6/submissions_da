
DA4B_T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000738  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000658  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000391  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_initializer>:
	}
}

void adc_initializer(void) 												//initialize ADC
{
	ADMUX = (0<<REFS1)|(0<<REFS0);													// ADC ENable
  90:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)| (1<<ADSC)| (1<<ADATE)| (0<<ADIF)|				// ADC Start Conversion
  94:	87 ee       	ldi	r24, 0xE7	; 231
  96:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9a:	08 95       	ret

0000009c <whats_the_speed>:
																		// Timer/Counter1 Interrupt Mask Register
}

void whats_the_speed(void)
{
	while((ADCSRA&(1<<ADIF))==0);
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	84 ff       	sbrs	r24, 4
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <whats_the_speed+0x4>
	
	if (ADC >= 820){ stop_motor = 1;}
  a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ae:	84 33       	cpi	r24, 0x34	; 52
  b0:	93 40       	sbci	r25, 0x03	; 3
  b2:	30 f0       	brcs	.+12     	; 0xc0 <whats_the_speed+0x24>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if ((ADC < 820) && (ADC >= 617)) { stop_motor = 0; speed_motor = 0x1869;}
  c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  c8:	84 33       	cpi	r24, 0x34	; 52
  ca:	93 40       	sbci	r25, 0x03	; 3
  cc:	88 f4       	brcc	.+34     	; 0xf0 <whats_the_speed+0x54>
  ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d6:	89 36       	cpi	r24, 0x69	; 105
  d8:	92 40       	sbci	r25, 0x02	; 2
  da:	50 f0       	brcs	.+20     	; 0xf0 <whats_the_speed+0x54>
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed_motor+0x1>
  ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed_motor>
	if ((ADC < 617) && (ADC >= 414)) { stop_motor = 0; speed_motor = 0x124F;}
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f8:	89 36       	cpi	r24, 0x69	; 105
  fa:	92 40       	sbci	r25, 0x02	; 2
  fc:	88 f4       	brcc	.+34     	; 0x120 <whats_the_speed+0x84>
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 106:	8e 39       	cpi	r24, 0x9E	; 158
 108:	91 40       	sbci	r25, 0x01	; 1
 10a:	50 f0       	brcs	.+20     	; 0x120 <whats_the_speed+0x84>
 10c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 114:	8f e4       	ldi	r24, 0x4F	; 79
 116:	92 e1       	ldi	r25, 0x12	; 18
 118:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed_motor+0x1>
 11c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed_motor>
	if ((ADC < 414) && (ADC >= 211)) { stop_motor = 0; speed_motor = 0x0C34;}
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 128:	8e 39       	cpi	r24, 0x9E	; 158
 12a:	91 40       	sbci	r25, 0x01	; 1
 12c:	88 f4       	brcc	.+34     	; 0x150 <whats_the_speed+0xb4>
 12e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 132:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 136:	83 3d       	cpi	r24, 0xD3	; 211
 138:	91 05       	cpc	r25, r1
 13a:	50 f0       	brcs	.+20     	; 0x150 <whats_the_speed+0xb4>
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	9c e0       	ldi	r25, 0x0C	; 12
 148:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed_motor+0x1>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed_motor>
	if ((ADC < 211) && (ADC >= 000)) { stop_motor = 0; speed_motor = 0x061A;}
 150:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 154:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 158:	83 3d       	cpi	r24, 0xD3	; 211
 15a:	91 05       	cpc	r25, r1
 15c:	70 f4       	brcc	.+28     	; 0x17a <whats_the_speed+0xde>
 15e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 162:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 166:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 16a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 16e:	8a e1       	ldi	r24, 0x1A	; 26
 170:	96 e0       	ldi	r25, 0x06	; 6
 172:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed_motor+0x1>
 176:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed_motor>
 17a:	08 95       	ret

0000017c <slow_the_freak_up>:
}
void slow_the_freak_up(void)
{
	// does this to begin slowing down the motor
	while((TIFR1 & 0x2) != 0b0010);
 17c:	b1 9b       	sbis	0x16, 1	; 22
 17e:	fe cf       	rjmp	.-4      	; 0x17c <slow_the_freak_up>
	PORTB = 0x09;
 180:	89 e0       	ldi	r24, 0x09	; 9
 182:	85 b9       	out	0x05, r24	; 5
	TIFR1 |= (1<<OCF1A);
 184:	b1 9a       	sbi	0x16, 1	; 22
	while((TIFR1 & 0x2) != 0b0010);
 186:	b1 9b       	sbis	0x16, 1	; 22
 188:	fe cf       	rjmp	.-4      	; 0x186 <slow_the_freak_up+0xa>
	PORTB = 0x03;
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	85 b9       	out	0x05, r24	; 5
	TIFR1 |= (1<<OCF1A);
 18e:	b1 9a       	sbi	0x16, 1	; 22
	while((TIFR1 & 0x2) != 0b0010);
 190:	b1 9b       	sbis	0x16, 1	; 22
 192:	fe cf       	rjmp	.-4      	; 0x190 <slow_the_freak_up+0x14>
	PORTB = 0X06;
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	85 b9       	out	0x05, r24	; 5
	TIFR1 |= (1<<OCF1A);
 198:	b1 9a       	sbi	0x16, 1	; 22
	while((TIFR1 & 0x2) != 0b0010);
 19a:	b1 9b       	sbis	0x16, 1	; 22
 19c:	fe cf       	rjmp	.-4      	; 0x19a <slow_the_freak_up+0x1e>
	PORTB = 0X0C;
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	85 b9       	out	0x05, r24	; 5
	TIFR1 |= (1<<OCF1A);
 1a2:	b1 9a       	sbi	0x16, 1	; 22
 1a4:	08 95       	ret

000001a6 <main>:
volatile unsigned int speed_motor;										// variable used to control the speed of the motor
volatile int stop_motor = 0;											// if 1, the motor will stop

int main(void)
{
	DDRB = 0b1111;														//Enable output on all of the B pins
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b0000;														// makes the fisrt value 0
 1aa:	15 b8       	out	0x05, r1	; 5
	adc_initializer();													// initialize ADC
 1ac:	0e 94 48 00 	call	0x90	; 0x90 <adc_initializer>
	TCCR1B = 0b11010;													// set CTC mode and 1024 prescaler
 1b0:	8a e1       	ldi	r24, 0x1A	; 26
 1b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR1 = 62258;
 1b6:	82 e3       	ldi	r24, 0x32	; 50
 1b8:	93 ef       	ldi	r25, 0xF3	; 243
 1ba:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	while(1)		
	{
		
		whats_the_speed();
			
		OCR1A = speed_motor;											// set OCR1A to the determined speed
 1c2:	08 e8       	ldi	r16, 0x88	; 136
 1c4:	10 e0       	ldi	r17, 0x00	; 0
		TCNT1 = 0x00;													// reset the clock
 1c6:	c4 e8       	ldi	r28, 0x84	; 132
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
	ICR1 = 62258;
	
	while(1)		
	{
		
		whats_the_speed();
 1ca:	0e 94 4e 00 	call	0x9c	; 0x9c <whats_the_speed>
			
		OCR1A = speed_motor;											// set OCR1A to the determined speed
 1ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed_motor>
 1d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed_motor+0x1>
 1d6:	f8 01       	movw	r30, r16
 1d8:	91 83       	std	Z+1, r25	; 0x01
 1da:	80 83       	st	Z, r24
		TCNT1 = 0x00;													// reset the clock
 1dc:	19 82       	std	Y+1, r1	; 0x01
 1de:	18 82       	st	Y, r1
		
		if(stop_motor == 0)
 1e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e8:	89 2b       	or	r24, r25
 1ea:	79 f7       	brne	.-34     	; 0x1ca <main+0x24>
		{
			 slow_the_freak_up();
 1ec:	0e 94 be 00 	call	0x17c	; 0x17c <slow_the_freak_up>
 1f0:	ec cf       	rjmp	.-40     	; 0x1ca <main+0x24>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
