
DA2B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000713  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB = 1<<2;		 // PB2 as an output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 1<<2;		 // keeps led low
  84:	85 b9       	out	0x05, r24	; 5
	PORTD = 1 << 2;		 // pull-up activated
  86:	8b b9       	out	0x0b, r24	; 11
	DDRB |= 1<<5;		 // turns off led thats always one
  88:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<5;		 // set it to low
  8a:	2d 9a       	sbi	0x05, 5	; 5
	EIMSK = (1 << INT0); // enable external interrupt
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	8d bb       	out	0x1d, r24	; 29
	sei();				 // enables the interrupt
  90:	78 94       	sei
  92:	ff cf       	rjmp	.-2      	; 0x92 <main+0x12>

00000094 <__vector_1>:
	
	while (1);			 // waits until there is an interrupt 
}

ISR(INT0_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	PORTB ^= ( 1 << 2);	// lights up the led 
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	98 27       	eor	r25, r24
  ac:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	38 e0       	ldi	r19, 0x08	; 8
  b2:	9d e3       	ldi	r25, 0x3D	; 61
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	30 40       	sbci	r19, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_1+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x2a>
  be:	00 00       	nop
	_delay_ms(1250);	// delays the led 
	PORTB ^= ( 1 << 2); // lights up the led 
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	89 27       	eor	r24, r25
  c4:	85 b9       	out	0x05, r24	; 5

}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
